/*
 * Category :- Activity
 * Developer:- Vikalp Patel
 * Aim      :- Add IPD Activity
 * Description :- Save IPD
 * S - START E- END  C- COMMENTED  U -EDITED A -ADDED
 * --------------------------------------------------------------------------------------------------------------------
 * INDEX       DEVELOPER		DATE			DESCRIPTION
 * --------------------------------------------------------------------------------------------------------------------
 * 10001   	   VIKALP PATEL    09/01/2014		InitCap Values while saving into database.
 * 10002	   VIKALP PATEL    09/01/2014       Fix Searching with ID.
 */
package com.netdoers.com.ui;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AutoCompleteTextView;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FilterQueryProvider;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SimpleCursorAdapter;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.SimpleCursorAdapter.CursorToStringConverter;

import com.smarthumanoid.com.R;
import com.netdoers.com.SmartConsultant;
import com.netdoers.com.dto.DBConstant;
import com.netdoers.com.utils.InitCap;

@SuppressLint("ValidFragment")
public class AddIPDSearchActivity extends FragmentActivity{

	EditText addSxId;
	EditText addSxName;
	AutoCompleteTextView  addSxLocation;
	EditText addSxAge;
	EditText addIpdTotalCount;
	EditText addSxDiagnose;
	EditText addSxDate;
	AutoCompleteTextView addSxWard;
	CheckBox addSxEmergency;
	AutoCompleteTextView addIpdReferredBy;
	AutoCompleteTextView addSxType;
	EditText note;
	private RadioGroup radioSexGroup;
	RadioButton btnMale;
	RadioButton btnFemale;
	InitCap initCap;//ADDED 10001
	//final static int[] to = new int[] { android.R.id.text1 };
	final static int[] to = new int[] { R.id.txtText};
    final static String[] from = new String[] { DBConstant.Patient_Columns.COLUMN_NAME };
    final static String[] projection = { 
    										DBConstant.Patient_Columns.COLUMN_ID, 
    										DBConstant.Patient_Columns.COLUMN_NAME, 
    										DBConstant.Patient_Columns.COLUMN_TYPE,
    										DBConstant.Patient_Columns.COLUMN_SERVICE_TYPE
    									};
	
    SimpleCursorAdapter adapter;
	/*ArrayList<String> lstLocation = new ArrayList<String>();
	ArrayList<String> lstWard = new ArrayList<String>();

	ArrayList<String> lstReferredBy = new ArrayList<String>();
	ArrayList<String> lstPatientType = new ArrayList<String>();*/
	
	/*ArrayAdapter<String> locationAdapter;
	ArrayAdapter<String> wardAdapter;
	ArrayAdapter<String> referredByAdapter;
	ArrayAdapter<String> typeAdapter;*/
	
	SimpleCursorAdapter locationAdapter;
	SimpleCursorAdapter wardAdapter;
	SimpleCursorAdapter typeAdapter;
	SimpleCursorAdapter referredByAdapter;
	
	String _id; // 0
	String custId; // 1
	String name; // 2
	String location;//8
	String age; //3
	String totalCount; //4
	String diagnosis; //5
	String date;//11
	String ward;//12
	String emergency;//13
	String ref;//7
	String type;//6
	String noteStr;//17
	String sex;
	
	
	int searchBy = 0;
	
	String _pre_id = null;
	
	String _name_id = null;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.add_ipd);
		initializeData();
		
		_name_id = getIntent().getStringExtra("name");
		 _pre_id = getIntent().getStringExtra("_id");
		
		searchBy = getIntent().getIntExtra("searchBy", 0);
		initCap = new InitCap();//ADDED 10001
		Cursor c = null;
		
		if(searchBy == 0)
		{
			//SU 10001
			//c = getContentResolver().query(DBConstant.Patient_Temp_Columns.CONTENT_URI, null, "_id=?", new String[]{_name_id}, null);
			c = getContentResolver().query(DBConstant.Patient_Temp_Columns.CONTENT_URI, null, "_id=?", new String[]{_pre_id}, null);
			//EU 10001
		}
		else if(searchBy == 1)
		{
			//SU 10001
			//c = getContentResolver().query(DBConstant.Patient_Temp_Columns.CONTENT_URI, null, "_id=?", new String[]{_name_id}, null);
			c = getContentResolver().query(DBConstant.Patient_Temp_Columns.CONTENT_URI, null, "_id=?", new String[]{_pre_id}, null);
			//EU 10001
		}
		
		if(c != null && c.getCount() > 0)
		{
			c.moveToFirst();
			custId = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_CUSTOM_ID));
			name = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_NAME));
			age = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_AGE));
			totalCount = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_TOTALCOUNT));
			diagnosis = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_DIAGNOSIS));
			type = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_TYPE));
			ref = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_REF));
			location = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_LOCATION));
			date = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_DATE));
			ward = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_WARD));
			emergency = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_EMERGENCY));
			noteStr = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_NOTE));
			sex = c.getString(c.getColumnIndex(DBConstant.Patient_Temp_Columns.COLUMN_SEX));
			c.close();
		}

		addSxId = (EditText) findViewById(R.id.add_sx_id);
		addSxId.setText(custId);
		addSxName = (EditText) findViewById(R.id.add_sx_name);
		//setNameAdapter();
		addSxName.setText(name);
		addSxLocation = (AutoCompleteTextView) findViewById(R.id.add_sx_location);
		addSxLocation.setText(location);
		setLocationAdapter();
		
		addSxAge = (EditText) findViewById(R.id.add_sx_age);		
		addSxAge.setText(age);
		addIpdTotalCount = (EditText) findViewById(R.id.add_sx_totalCount);		
		addIpdTotalCount.setText(totalCount);
		
		addSxDiagnose = (EditText) findViewById(R.id.add_sx_diagnose);		
		addSxDiagnose.setText(diagnosis);
		
		addSxDate = (EditText) findViewById(R.id.add_sx_date);
		/*if(date != null && date.length() > 0)
		{
			addSxDate.setText(date);
		}*/
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String date = sdf.format(new Date(System.currentTimeMillis()));
		if(date.contains("/"))
		{
			date = date.replace("/", "-");
		}
		addSxDate.setText(date);
		
		addSxWard = (AutoCompleteTextView) findViewById(R.id.add_sx_ward);
		addSxWard.setText(ward);
		setWardAdapter();
		
		addSxEmergency = (CheckBox) findViewById(R.id.add_sx_manager_emergency);
		if(emergency != null && emergency.equalsIgnoreCase("true"))
		{
			addSxEmergency.setChecked(true);
		}
		else
		{
			addSxEmergency.setChecked(false);
		}
		addIpdReferredBy = (AutoCompleteTextView) findViewById(R.id.add_sx_referred_by);
		addIpdReferredBy.setText(ref);
		setReferredByAdapter();
		
		addSxType = (AutoCompleteTextView) findViewById(R.id.add_sx_patient_type);
		addSxType.setText(type);
		setTypeAdapter();
		
		note = (EditText) findViewById(R.id.add_sx_note);
		note.setText(noteStr);
		
		radioSexGroup = (RadioGroup) findViewById(R.id.radioSex);
		
		btnMale = (RadioButton) findViewById(R.id.radioMale);
		btnFemale = (RadioButton) findViewById(R.id.radioFemale);
		
		if(sex!= null && sex.equals("Male"))
		{
			btnMale.setChecked(true);
			btnFemale.setChecked(false);
		}
		else if(sex!= null && sex.equals("Female"))
		{
			btnMale.setChecked(false);
			btnFemale.setChecked(true);
		}
		/*LocationTask locationTask = new LocationTask();
		locationTask.execute();*/
	}
	
	ArrayList<String> strLocation = new ArrayList<String>();
	ArrayList<String> strWard = new ArrayList<String>();

	ArrayList<String> strType = new ArrayList<String>();
	ArrayList<String> strRef = new ArrayList<String>();
	
	public void initializeData()
	{
		strLocation = SmartConsultant.getApplication().loadLocation();
		strWard = SmartConsultant.getApplication().loadWard();
		strType = SmartConsultant.getApplication().loadType();
		strRef = SmartConsultant.getApplication().loadRef();
	}
	
	public void addLocation()
	{
		String s = initCap.toTitleCase(addSxLocation.getText().toString());//EDITED 10001
		if(s!= null && s.length() > 0 && !strLocation.contains(new String(s)))
		{
			addContent(DBConstant.Location_Columns.CONTENT_URI, s);
		}
	}
	
	
	public void addWard()
	{
		String s = initCap.toTitleCase(addSxWard.getText().toString());//EDITED 10001
		if(s!= null && s.length() > 0 && !strWard.contains(new String(s)))
		{
			addContent(DBConstant.Ward_Columns.CONTENT_URI, s);
		}
	}
	
	
	
	public void addType()
	{
		String s = initCap.toTitleCase(addSxType.getText().toString());//EDITED 10001
		if(s!= null && s.length() > 0 && !strType.contains(new String(s)))
		{
			addContent(DBConstant.Types_Columns.CONTENT_URI, s);
		}
	}
	
	public void addRef()
	{
		String s = initCap.toTitleCase(addIpdReferredBy.getText().toString());//EDITED 10001
		if(s!= null && s.length() > 0 && !strRef.contains(new String(s)))
		{
			addContent(DBConstant.Ref_Columns.CONTENT_URI, s);
		}
	}
	
	
	
	public void addContent(Uri uri, String str)
	{
		ContentValues values = new ContentValues();
		str = initCap.toTitleCase(str);//ADDED 10001
		values.put(DBConstant.Location_Columns.COLUMN_NAME, str);
		values.put(DBConstant.Location_Columns.COLUMN_SYNC_STATUS, 0);
		getContentResolver().insert(uri, values);
	}
	public void startManagerScreen(int index, int reqCode)
	{
		Intent i = new Intent(this, ManageLOVActivity.class);
		i.putExtra("index", index);
		startActivityForResult(i, reqCode);
	}
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent arg2) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, arg2);
		String currentSelection = null;
		if(arg2 != null)
		{
			currentSelection = arg2.getStringExtra("data");
		}
		if(resultCode == RESULT_OK && currentSelection != null)
		{
			switch(requestCode)
			{
				case 100:
					location = currentSelection;
					break;
				case 104: 
					ward = currentSelection;
					break;
				case 107:
					ref = currentSelection;
					break;
				case 106:
					type = currentSelection;
					break;
						
			}
			clearDataStructure();
			onDataLoaded(currentSelection);
			/*LocationTask locationTask = new LocationTask();
			locationTask.execute();*/
		}
	}
	public void onManageLocation(View v)
	{
		startManagerScreen(0, 100);
	}
		
	public void onManageWard(View v)
	{
		startManagerScreen(2, 104);
	}
	
	public void onManageReferredBy(View v)
	{
		startManagerScreen(5, 107);
	}
	
	public void onManagePatientType(View v)
	{
		startManagerScreen(4, 106);
	}
	public void clearDataStructure()
	{
		/*lstLocation = new ArrayList<String>();
		lstWard = new ArrayList<String>();
		lstPatientType = new ArrayList<String>();
		lstReferredBy = new ArrayList<String>();*/
	}
	public void onTime(View v)
	{
		DialogFragment newFragment = new FromDatePickerFragment();
	    newFragment.show(getSupportFragmentManager(), "From Date");
	}
	
	class FromDatePickerFragment extends DialogFragment implements OnDateSetListener
	{

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current time as the default values for the picker
			final Calendar c = Calendar.getInstance();
			int yr = c.get(Calendar.YEAR);
			int mnth = c.get(Calendar.MONTH);
			int day = c.get(Calendar.DAY_OF_MONTH);
			// Create a new instance of TimePickerDialog and return it
			return new DatePickerDialog(getActivity(), this, yr, mnth, day);
		}
		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear,int dayOfMonth) {
			// TODO Auto-generated method stub
			String date;
			monthOfYear++;
			if(dayOfMonth < 10)
			{
				date = "0" + dayOfMonth+"-";
			}
			else 
			{
				date = dayOfMonth+"-";
			}
			if(monthOfYear < 10)
			{
				date += "0" + monthOfYear+"-";
			}
			else
			{
				date += monthOfYear+"-";
			}
			
			date += year;
			//addSxDate.setText(dayOfMonth+"-"+monthOfYear+"-"+year);
			addSxDate.setText(date);
		}
	}
	public void save()
	{
		//Toast.makeText(this, "Data saved", Toast.LENGTH_LONG).show();
		Bundle b = new Bundle();
		b.putString("message", "Saving IPD");
		showDialog(LOADING, b);
		ContentValues contentValues = new ContentValues();
		ContentValues contentValuesTemp = new ContentValues();
		
		String nm = initCap.toTitleCase(addSxName.getText().toString()); // ADDED 10001
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_CUSTOM_ID, addSxId.getText().toString());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_CUSTOM_ID, addSxId.getText().toString());
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_NAME, nm);//EDITED 10001
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_NAME, nm);//EDITED 10001
		ContentValues name = new ContentValues();
		name.put(DBConstant.Patient_Name_Columns.COLUMN_NAME, nm);//EDITED 10001
		name.put(DBConstant.Patient_Name_Columns.COLUMN_CUSTOM_ID, addSxId.getText().toString());//EDITED 10001
		
		
		String loc = "";
		//if(lstLocation != null && lstLocation.size() > 0)
		{
			loc = initCap.toTitleCase(addSxLocation.getText().toString());//EDITED 10001//loc = lstLocation.get(addSxLocation.getSelectedItemPosition());
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_LOCATION, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_LOCATION, loc);
		name.put(DBConstant.Patient_Name_Columns.COLUMN_LOCATION, loc);
		addLocation();
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_AGE, addSxAge.getText().toString());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_AGE, addSxAge.getText().toString());
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_TOTALCOUNT, addIpdTotalCount.getText().toString());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_TOTALCOUNT, addIpdTotalCount.getText().toString());
		
		String strDiag = initCap.toTitleCase(addSxDiagnose.getText().toString());
		contentValues.put(DBConstant.Patient_Columns.COLUMN_DIAGNOSIS, strDiag);//EDITED 10001
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_DIAGNOSIS, strDiag);//EDITED 10001
		
		loc = "";
		if(!addSxDate.getText().toString().equals("Date : DD-MM-YYYY"))
		{
			loc = addSxDate.getText().toString(); 
		}
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_DATE, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_DATE, loc);
		name.put(DBConstant.Patient_Name_Columns.COLUMN_DATE, loc);
		
		//getContentResolver().insert(DBConstant.Patient_Name_Columns.CONTENT_URI, name);
		getContentResolver().update(DBConstant.Patient_Name_Columns.CONTENT_URI, name, "_id=?", new String[]{_pre_id});
		
		loc = "";
		//if(lstWard != null && lstWard.size() > 0)
		{
			loc = initCap.toTitleCase(addSxWard.getText().toString());//EDITED 10001//loc = lstWard.get(addSxWard.getSelectedItemPosition());
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_WARD, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_WARD, loc);
		addWard();

		contentValues.put(DBConstant.Patient_Columns.COLUMN_EMERGENCY, addSxEmergency.isChecked());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_EMERGENCY, addSxEmergency.isChecked());
		
		loc = "";
		//if(lstReferredBy != null && lstReferredBy.size() > 0)
		{
			loc = addIpdReferredBy.getText().toString();//loc = lstReferredBy.get(addIpdReferredBy.getSelectedItemPosition());
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_REF, loc);	
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_REF, loc);
		addRef();
		
		loc = "";
		//if(lstPatientType != null && lstPatientType.size() > 0)
		{
			loc = initCap.toTitleCase(addSxType.getText().toString());//EDITED 10001//loc = lstPatientType.get(addSxType.getSelectedItemPosition());
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_TYPE, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_TYPE, loc);
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_SERVICE_TYPE, 1);
		addType();
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_NOTE, note.getText().toString());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_NOTE, note.getText().toString());

		String sex = null;
		if(btnMale.isChecked())
		{
			sex = "Male";
		}
		else if(btnFemale.isChecked())
		{
			sex = "Female";
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_SEX, sex);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_SEX, sex);
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_SX_WATCH, "");
		
		contentValues.put(DBConstant.Patient_Columns.COLUMN_SYNC_STATUS, 0);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_SYNC_STATUS, 0);
		
		
		getContentResolver().insert(DBConstant.Patient_Columns.CONTENT_URI, contentValues);
		
		if(searchBy == 0)
		{
			getContentResolver().update(DBConstant.Patient_Temp_Columns.CONTENT_URI, contentValuesTemp, "_id=?", new String[]{_name_id});
		}
		else if(searchBy == 1)
		{
			getContentResolver().update(DBConstant.Patient_Temp_Columns.CONTENT_URI, contentValuesTemp, "_id=?", new String[]{_name_id});
		}
		
		
		removeDialog(LOADING);
		
		Toast.makeText(this, "IPD saved.", Toast.LENGTH_LONG).show();
		clearField();

	}
	public void clearField()
	{
		addSxId.setText("");
		addSxName.setText("");
		//if(lstLocation != null && lstLocation.size() > 0)
		{
			addSxLocation.setText("");//addSxLocation.setSelection(0);
		}
		
		addSxAge.setText("");
		

		addSxDiagnose.setText("");


		//addSxDate.setText("Date : DD-MM-YYYY");
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String date = sdf.format(new Date(System.currentTimeMillis()));
		if(date.contains("/"))
		{
			date = date.replace("/", "-");
		}
		addSxDate.setText(date);
		
		//if(lstWard != null && lstWard.size() > 0)
		{
			addSxWard.setText("");//addSxWard.setSelection(0);
		}

		addSxEmergency.setChecked(false);
		
		
		//if(lstPatientType != null && lstPatientType.size() > 0)
		{
			addSxType.setText("");//addSxType.setSelection(0);
		}
		
		String loc = "";
		/*if(lstLocation != null && lstLocation.size() > 0)
		{
			loc = lstLocation.get(addSxLocation.getSelectedItemPosition());
		}*/
		
		addIpdTotalCount.setText("");
				
		loc = "";
		//if(lstReferredBy != null && lstReferredBy.size() > 0)
		{
			addIpdReferredBy.setText("");//addIpdReferredBy.setSelection(0);
		}
				
		note.setText("");

	}


	public void onSave(View v)
	{
		if((addSxName.getText() != null && addSxName.getText().toString().length() > 0) 
				&& (addSxLocation.getText() != null && addSxLocation.getText().toString().length() > 0))
		{
			save();
		}
		else
		{
			Toast.makeText(this, "Make sure you have enter proper values in Name and Location fields.", Toast.LENGTH_LONG).show();
		}
	}
	
	public void onSaveMain(View v)
	{
		if((addSxName.getText() != null && addSxName.getText().toString().length() > 0) 
				&& (addSxLocation.getText() != null && addSxLocation.getText().toString().length() > 0))
		{
			save();
			finish();
		}
		else
		{
			Toast.makeText(this, "Make sure you have enter proper values in Name and Location fields.", Toast.LENGTH_LONG).show();
		}
		/*save();
		finish();*/
	}
	
	public void onCancel(View v)
	{
		finish();
	}
	public void showHideNote(View v)
	{
		if(note.getVisibility() == View.GONE)
		{
			note.setVisibility(View.VISIBLE);
		}
		else
		{
			note.setVisibility(View.GONE);
		}
	}
	
	public void resetData()
	{
		/*lstLocation.clear();
		lstPatientType.clear();
		lstReferredBy.clear();
		lstWard.clear();*/
	}
	public static final int LOADING = 101;
	@Override
	protected Dialog onCreateDialog(int id, Bundle b) {
		// TODO Auto-generated method stub
		String msg = b.getString("message");
		switch(id)
		{
			case LOADING:
				ProgressDialog loadingDialog = new ProgressDialog(this);
				loadingDialog.setMessage(msg);
				loadingDialog.setCancelable(false);
				return loadingDialog;
		}
		return super.onCreateDialog(id);
	}
	/*public void setNameAdapter()
	{
		adapter = 
            new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    from, to);
        addSxName.setAdapter(adapter);

        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
        addSxName.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
            }
        });

        // Set the CursorToStringConverter, to provide the labels for the
        // choices to be displayed in the AutoCompleteTextView.
        adapter.setCursorToStringConverter(new CursorToStringConverter() {
            public String convertToString(android.database.Cursor cursor) {
                // Get the label for this row out of the "state" column
                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
                final String str = cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Columns.COLUMN_NAME));
                return str;
            }
        });
      // Set the FilterQueryProvider, to run queries for choices
        // that match the specified input.
        adapter.setFilterQueryProvider(new FilterQueryProvider() {
            public Cursor runQuery(CharSequence constraint) {
                // Search for states whose names begin with the specified letters.
                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
            	Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
                return cursor;
            }
        });
	}*/
	public void setLocationAdapter()
	{
		//int[] to = new int[] { android.R.id.text1 };
	    String[] from = new String[] { DBConstant.Location_Columns.COLUMN_NAME };
	    
		locationAdapter = 
            /*new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    from, to);*/
				new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
        addSxLocation.setAdapter(locationAdapter);

        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
        addSxLocation.setOnItemClickListener(new OnItemClickListener() {
            @Override
			public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                /*Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
                String name = cursor.getString(1);
                String _id = cursor.getString(0);
                String type = cursor.getString(2);
                startNextActivity(_id, name, type);*/
                // Update the parent class's TextView
            }
        });

        // Set the CursorToStringConverter, to provide the labels for the
        // choices to be displayed in the AutoCompleteTextView.
        locationAdapter.setCursorToStringConverter(new CursorToStringConverter() {
            @Override
			public String convertToString(android.database.Cursor cursor) {
                // Get the label for this row out of the "state" column
                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
                final String str = cursor.getString(cursor.getColumnIndex(DBConstant.Location_Columns.COLUMN_NAME));
                return str;
            }
        });
      // Set the FilterQueryProvider, to run queries for choices
        // that match the specified input.
        locationAdapter.setFilterQueryProvider(new FilterQueryProvider() {
            @Override
			public Cursor runQuery(CharSequence constraint) {
                // Search for states whose names begin with the specified letters.
                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
            	//Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
            	Cursor cursor = getContentResolver().query(DBConstant.Location_Columns.CONTENT_URI, null, DBConstant.Location_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
                return cursor;
            }
        });
	}
	/*private class LocationTask extends AsyncTask<Void, Void, Cursor>
	{

		@Override
		protected Cursor doInBackground(Void... params) {
			// TODO Auto-generated method stub
			try {
				return AddIPDSearchActivity.this.getContentResolver().query(DBConstant.Location_Columns.CONTENT_URI, null, null, null, null);
			} catch (SQLException sqle) {
				throw sqle;
			}
		}
		@Override
		protected void onPostExecute(Cursor result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);

			if(result != null && result.getCount() > 0)
			{
				//result.moveToFirst();
				while(result.moveToNext())
				{
					lstLocation.add(result.getString(1));
				}
				locationAdapter = new ArrayAdapter<String>(AddIPDSearchActivity.this, android.R.layout.simple_AutoCompleteTextView_item, lstLocation);
				locationAdapter.setDropDownViewResource(android.R.layout.simple_AutoCompleteTextView_dropdown_item);
				addSxLocation.setAdapter(locationAdapter);
			}
			WardTask wardTask = new WardTask();
			wardTask.execute();
		}
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			Bundle b = new Bundle();
			b.putString("message", "Getting DB contents");
			showDialog(LOADING, b);
		}
	}*/
	
	public void setWardAdapter()
	{
		//int[] to = new int[] { android.R.id.text1 };
	    String[] from = new String[] { DBConstant.Ward_Columns.COLUMN_NAME };
		wardAdapter = 
            /*new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    from, to);*/
				new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
        addSxWard.setAdapter(wardAdapter);

        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
        addSxWard.setOnItemClickListener(new OnItemClickListener() {
            @Override
			public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                /*Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
                String name = cursor.getString(1);
                String _id = cursor.getString(0);
                String type = cursor.getString(2);
                startNextActivity(_id, name, type);*/
                // Update the parent class's TextView
            }
        });

        // Set the CursorToStringConverter, to provide the labels for the
        // choices to be displayed in the AutoCompleteTextView.
        wardAdapter.setCursorToStringConverter(new CursorToStringConverter() {
            @Override
			public String convertToString(android.database.Cursor cursor) {
                // Get the label for this row out of the "state" column
                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
                final String str = cursor.getString(cursor.getColumnIndex(DBConstant.Ward_Columns.COLUMN_NAME));
                return str;
            }
        });
      // Set the FilterQueryProvider, to run queries for choices
        // that match the specified input.
        wardAdapter.setFilterQueryProvider(new FilterQueryProvider() {
            @Override
			public Cursor runQuery(CharSequence constraint) {
                // Search for states whose names begin with the specified letters.
                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
            	//Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
            	Cursor cursor = getContentResolver().query(DBConstant.Ward_Columns.CONTENT_URI, null, DBConstant.Ward_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
                return cursor;
            }
        });
	}
	/*private class WardTask extends AsyncTask<Void, Void, Cursor>
	{

		@Override
		protected Cursor doInBackground(Void... params) {
			// TODO Auto-generated method stub
			try {
				return AddIPDSearchActivity.this.getContentResolver().query(DBConstant.Ward_Columns.CONTENT_URI, null, null, null, null);
			} catch (SQLException sqle) {
				throw sqle;
			}
		}
		@Override
		protected void onPostExecute(Cursor result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);

			if(result != null && result.getCount() > 0)
			{
				//result.moveToFirst();
				while(result.moveToNext())
				{
					lstWard.add(result.getString(1));
				}
				wardAdapter = new ArrayAdapter<String>(AddIPDSearchActivity.this, android.R.layout.simple_AutoCompleteTextView_item, lstWard);
				wardAdapter.setDropDownViewResource(android.R.layout.simple_AutoCompleteTextView_dropdown_item);
				addSxWard.setAdapter(wardAdapter);
			}
			ReferredByTask teamMemberTask = new ReferredByTask();
			teamMemberTask.execute();
		}
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
		}
	}*/
	
	public void setReferredByAdapter()
	{
		//int[] to = new int[] { android.R.id.text1 };
	    String[] from = new String[] { DBConstant.Ref_Columns.COLUMN_NAME };
	    
		referredByAdapter = 
            /*new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    from, to);*/
				new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
        addIpdReferredBy.setAdapter(referredByAdapter);

        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
        addIpdReferredBy.setOnItemClickListener(new OnItemClickListener() {
            @Override
			public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                /*Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
                String name = cursor.getString(1);
                String _id = cursor.getString(0);
                String type = cursor.getString(2);
                startNextActivity(_id, name, type);*/
                // Update the parent class's TextView
            }
        });

        // Set the CursorToStringConverter, to provide the labels for the
        // choices to be displayed in the AutoCompleteTextView.
        referredByAdapter.setCursorToStringConverter(new CursorToStringConverter() {
            @Override
			public String convertToString(android.database.Cursor cursor) {
                // Get the label for this row out of the "state" column
                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
                final String str = cursor.getString(cursor.getColumnIndex(DBConstant.Ref_Columns.COLUMN_NAME));
                return str;
            }
        });
      // Set the FilterQueryProvider, to run queries for choices
        // that match the specified input.
        referredByAdapter.setFilterQueryProvider(new FilterQueryProvider() {
            @Override
			public Cursor runQuery(CharSequence constraint) {
                // Search for states whose names begin with the specified letters.
                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
            	//Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
            	Cursor cursor = getContentResolver().query(DBConstant.Ref_Columns.CONTENT_URI, null, DBConstant.Ref_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
                return cursor;
            }
        });
	}
	public void setTypeAdapter()
	{
		//int[] to = new int[] { android.R.id.text1 };
	    String[] from = new String[] { DBConstant.Types_Columns.COLUMN_NAME };
	    
		typeAdapter = 
            /*new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    from, to);*/
				new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
        addSxType.setAdapter(typeAdapter);

        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
        addSxType.setOnItemClickListener(new OnItemClickListener() {
            @Override
			public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                /*Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
                String name = cursor.getString(1);
                String _id = cursor.getString(0);
                String type = cursor.getString(2);
                startNextActivity(_id, name, type);*/
                // Update the parent class's TextView
            }
        });

        // Set the CursorToStringConverter, to provide the labels for the
        // choices to be displayed in the AutoCompleteTextView.
        typeAdapter.setCursorToStringConverter(new CursorToStringConverter() {
            @Override
			public String convertToString(android.database.Cursor cursor) {
                // Get the label for this row out of the "state" column
                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
                final String str = cursor.getString(cursor.getColumnIndex(DBConstant.Types_Columns.COLUMN_NAME));
                return str;
            }
        });
      // Set the FilterQueryProvider, to run queries for choices
        // that match the specified input.
        typeAdapter.setFilterQueryProvider(new FilterQueryProvider() {
            @Override
			public Cursor runQuery(CharSequence constraint) {
                // Search for states whose names begin with the specified letters.
                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
            	//Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
            	Cursor cursor = getContentResolver().query(DBConstant.Types_Columns.CONTENT_URI, null, DBConstant.Types_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
            	
                return cursor;
            }
        });
	}
	/*private class ReferredByTask extends AsyncTask<Void, Void, Cursor>
	{

		@Override
		protected Cursor doInBackground(Void... params) {
			// TODO Auto-generated method stub
			try {
				return AddIPDSearchActivity.this.getContentResolver().query(DBConstant.Ref_Columns.CONTENT_URI, null, null, null, null);
			} catch (SQLException sqle) {
				throw sqle;
			}
		}
		@Override
		protected void onPostExecute(Cursor result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);

			if(result != null && result.getCount() > 0)
			{
				//result.moveToFirst();
				while(result.moveToNext())
				{
					lstReferredBy.add(result.getString(1));
				}
				referredByAdapter = new ArrayAdapter<String>(AddIPDSearchActivity.this, android.R.layout.simple_AutoCompleteTextView_item, lstReferredBy);
				referredByAdapter.setDropDownViewResource(android.R.layout.simple_AutoCompleteTextView_dropdown_item);
				addIpdReferredBy.setAdapter(referredByAdapter);
			}
			TypeTask referredByTask = new TypeTask();
			referredByTask.execute();
		}
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
		}
	}
	private class TypeTask extends AsyncTask<Void, Void, Cursor>
	{

		@Override
		protected Cursor doInBackground(Void... params) {
			// TODO Auto-generated method stub
			try {
				return AddIPDSearchActivity.this.getContentResolver().query(DBConstant.Types_Columns.CONTENT_URI, null, null, null, null);
			} catch (SQLException sqle) {
				throw sqle;
			}
		}
		@Override
		protected void onPostExecute(Cursor result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);

			if(result != null && result.getCount() > 0)
			{
				//result.moveToFirst();
				while(result.moveToNext())
				{
					lstPatientType.add(result.getString(1));
				}
				typeAdapter = new ArrayAdapter<String>(AddIPDSearchActivity.this, android.R.layout.simple_AutoCompleteTextView_item, lstPatientType);
				typeAdapter.setDropDownViewResource(android.R.layout.simple_AutoCompleteTextView_dropdown_item);
				addSxType.setAdapter(typeAdapter);
			}
			removeDialog(LOADING);
			onDataLoaded();
		}
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
		}
	}*/
	public void onDataLoaded(String data)
	{
		//if(lstLocation!= null && lstLocation.size()>0)
		{
			//int index = lstLocation.indexOf(location);
			//if(index >=0)
			{
				addSxLocation.setText(data);//addSxLocation.setSelection(index);
				addSxLocation.requestFocus();
				Handler handler = new Handler() 
				{
					@Override
					public void handleMessage(Message msg) {
					    ((AutoCompleteTextView)msg.obj).setAdapter(locationAdapter);
					};
				};
				Message msg = handler.obtainMessage();
				msg.obj = addSxLocation;
				handler.sendMessageDelayed(msg, 200); 
			}
		}
		
		//if(lstWard!= null && lstWard.size()>0)
		{
			//int index = lstWard.indexOf(ward);
			//if(index >=0)
			{
				addSxWard.setText(data);//addSxWard.setSelection(index);
				addSxWard.requestFocus();
				Handler handler = new Handler() 
				{
					@Override
					public void handleMessage(Message msg) {
					    ((AutoCompleteTextView)msg.obj).setAdapter(wardAdapter);
					};
				};
				Message msg = handler.obtainMessage();
				msg.obj = addSxWard;
				handler.sendMessageDelayed(msg, 200);
			}
		}
		
		//if(lstPatientType!= null && lstPatientType.size()>0)
		{
			//int index = lstPatientType.indexOf(type);
			//if(index >=0)
			{
				addSxType.setText(data);//addSxType.setSelection(index);
				addSxType.requestFocus();
				Handler handler = new Handler() 
				{
					@Override
					public void handleMessage(Message msg) {
					    ((AutoCompleteTextView)msg.obj).setAdapter(typeAdapter);
					};
				};
				Message msg = handler.obtainMessage();
				msg.obj = addSxType;
				handler.sendMessageDelayed(msg, 200);
			}
		}
		//if(lstReferredBy!= null && lstReferredBy.size()>0)
		{
			//int index = lstReferredBy.indexOf(ref);
			//if(index >=0)
			{
				addIpdReferredBy.setText(data);//addIpdReferredBy.setSelection(index);
				addIpdReferredBy.requestFocus();
				Handler handler = new Handler() 
				{
					@Override
					public void handleMessage(Message msg) {
					    ((AutoCompleteTextView)msg.obj).setAdapter(referredByAdapter);
					};
				};
				Message msg = handler.obtainMessage();
				msg.obj = addIpdReferredBy;
				handler.sendMessageDelayed(msg, 200);
			}
		}
	}
	
	@Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.menu, menu);
        return true;
    }
     
    /**
     * Event Handling for Individual menu item selected
     * Identify single menu item by it's id
     * */
    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
         
        switch (item.getItemId())
        {
        case R.id.mnuHelp:
        	Intent i = new Intent(this, HelpActivity.class);
        	i.putExtra("caller", "ipd");
        	startActivity(i);
            return true;
        default:
            return super.onOptionsItemSelected(item);
        }
    }   

}
