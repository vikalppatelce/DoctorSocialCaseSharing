/* HISTORY
 * CATEGORY 		:- UI | DASHBOARD
 * DEVELOPER		:- VIKALP PATEL
 * AIM      		:- DASHBOARD
 * DESCRIPTION 		:- APPLICATION MAIN DASHBOARD
 * 
 * S - START E- END  C- COMMENTED  U -EDITED A -ADDED
 * --------------------------------------------------------------------------------------------------------------------
 * INDEX       DEVELOPER		DATE			FUNCTION		DESCRIPTION
 * --------------------------------------------------------------------------------------------------------------------
 * 10001       VIKALP PATEL    07/01/2014     				   ADDING PAYMENT SCREEN
 * 10002       VIKALP PATEL    07/01/2014 					   SETTINGS/SETUP MENU
 * 10003       VIKALP PATEL    07/01/2014      				   ADDING UPDATED DASHBOARD WITH PAYMENT SCREEN
 * 10004	   VIKALP PATEL    10/01/2014					   ADDING PREFERENCES SETUP
 * 10005       VIKALP PATEL    10/01/2014       			   SETTING APPLICATION IN FULL SCREEN MODE
 * 10006       VIKALP PATEL    13/01/2014      				   ADDED SEARCH ON THE BASIS OF SEARCH ALGORIGTHM
 * 10007       VIKALP PATEL    15/01/2014       			   ADDED DELETE OPTION WITH SEARCH OPTION DIRECTLY
 * 10008       VIKALP PATEL    17/01/2014                      DELETE PATIENT RECORD DISCARD ITS PICTURES ALSO
 * 10009       VIKALP PATEL    18/01/2014                      DASHBOARD FROM PREFERENCES
 * --------------------------------------------------------------------------------------------------------------------
 */
package com.netdoers.com.ui;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.SQLException;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AutoCompleteTextView;
import android.widget.FilterQueryProvider;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.LinearLayout.LayoutParams;
import android.widget.SimpleCursorAdapter.CursorToStringConverter;

import com.netdoers.com.CustomToast;
import com.netdoers.com.SmartConsultant;
import com.netdoers.com.dto.DBConstant;
import com.netdoers.com.utils.SearchAlgo;
import com.smarthumanoid.com.R;
import com.smarthumanoid.com.R.color;

@SuppressLint("ValidFragment")
public class HomeActivity extends FragmentActivity{

	//SA 10009
	LinearLayout l1,l2,l3,l4,l5,l6,l7,l8;
	ImageView   i1,i2,i3,i4,i5,i6,i7,i8;
	ImageView ii1,ii2,ii3,ii4,ii5,ii6,ii7,ii8;
	TextView t1,t2,t3,t4,t5,t6,t7,t8;
	//EA 10009
	
	AutoCompleteTextView searchText;
	//final static int[] to = new int[] { android.R.id.text1};
	final static int[] to = new int[] { R.id.txtText, R.id.txtLocation, R.id.txtDate};
    final static String[] fromName = new String[] { DBConstant.Patient_Name_Columns.COLUMN_NAME,DBConstant.Patient_Name_Columns.COLUMN_LOCATION,
		DBConstant.Patient_Name_Columns.COLUMN_DATE};
    final static String[] fromId = new String[] { DBConstant.Patient_Name_Columns.COLUMN_NAME,DBConstant.Patient_Name_Columns.COLUMN_LOCATION,
		DBConstant.Patient_Name_Columns.COLUMN_DATE};
    final static String[] projection = { 
    										DBConstant.Patient_Temp_Columns.COLUMN_ID, 
    										DBConstant.Patient_Temp_Columns.COLUMN_NAME,
    										DBConstant.Patient_Temp_Columns.COLUMN_CUSTOM_ID,
    										DBConstant.Patient_Temp_Columns.COLUMN_LOCATION,
    										DBConstant.Patient_Temp_Columns.COLUMN_DATE,
    									};
    
    static int searchBy = -1; // 0 - name, 1 - id
    Cursor myLocationCursor;
    
    String[] data;
    String name = null;
    SharedPreferences pref;//ADDED 10005
    public static final int SETTINGS = 1001;//ADDED 10005
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		//setContentView(R.layout.options_screen); SU10003
		//SA 10005
		pref = PreferenceManager.getDefaultSharedPreferences(SmartConsultant.getApplication());
		if(pref.getBoolean("prefIsFullScreen", false))
		{
			//setTheme(R.style.FullScreen);
			requestWindowFeature(Window.FEATURE_NO_TITLE);
	        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
		}
		//EA 10005
		//SA 10009
		setContentView(R.layout.options_screen_updated);
		//setContentView(R.layout.option_screen_dashboard);//EU10003
		
		l1 = (LinearLayout)findViewById(R.id.db1);
		l2 = (LinearLayout)findViewById(R.id.db2);
		l3 = (LinearLayout)findViewById(R.id.db3);
		l4 = (LinearLayout)findViewById(R.id.db4);
		l5 = (LinearLayout)findViewById(R.id.db5);
		l6 = (LinearLayout)findViewById(R.id.db6);
		l7 = (LinearLayout)findViewById(R.id.db7);
		l8 = (LinearLayout)findViewById(R.id.db8);
		
		i1 = (ImageView)findViewById(R.id.db1_img);
		i2 = (ImageView)findViewById(R.id.db2_img);
		i3 = (ImageView)findViewById(R.id.db3_img);
		i4 = (ImageView)findViewById(R.id.db4_img);
		i5 = (ImageView)findViewById(R.id.db5_img);
		i6 = (ImageView)findViewById(R.id.db6_img);
		i7 = (ImageView)findViewById(R.id.db7_img);
		i8 = (ImageView)findViewById(R.id.db8_img);
		
		
		ii1 = (ImageView)findViewById(R.id.db1_img_img);
		ii2 = (ImageView)findViewById(R.id.db2_img_img);
		ii3 = (ImageView)findViewById(R.id.db3_img_img);
		ii4 = (ImageView)findViewById(R.id.db4_img_img);
		ii5 = (ImageView)findViewById(R.id.db5_img_img);
		ii6 = (ImageView)findViewById(R.id.db6_img_img);
		ii7 = (ImageView)findViewById(R.id.db7_img_img);
		
		t1 = (TextView)findViewById(R.id.db1_img_img_txt);
		t2 = (TextView)findViewById(R.id.db2_img_img_txt);
		t3 = (TextView)findViewById(R.id.db3_img_img_txt);
		t4 = (TextView)findViewById(R.id.db4_img_img_txt);
		t5 = (TextView)findViewById(R.id.db5_img_img_txt);
		t6 = (TextView)findViewById(R.id.db6_img_img_txt);
		t7 = (TextView)findViewById(R.id.db7_img_img_txt);
		t8 = (TextView)findViewById(R.id.db8_img_txt);
		

		//checkOptions();
		//EA 10009
		
		String s = "[AMPUTATION, Close Reduction (CMR), CMR WITH K - WIRING, CRUSH INJURY, DEBRIDEMENT, Implant Removal , Patella fixation TBW, Radius \\/ Ulna nailing, Radius \\/ Ulna Plating, Tibia Interlock nailing or plating]";
		if(s.contains("\\/"))
		{
			s = s.replace("\\/", "/");
		}
		new SelectDataTask().execute(DBConstant.Location_Columns.CONTENT_URI);
		
		searchText = (AutoCompleteTextView) findViewById(R.id.search_text);
		// Create a SimpleCursorAdapter for the State Name field.
        /*SimpleCursorAdapter adapter = 
            new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    fromName, to);
        searchText.setAdapter(adapter);*/

        searchText.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				searchText.setText("");
				showDialog(SEARCH);
				name = null;
			}
		});
        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
        searchText.setOnItemClickListener(new OnItemClickListener() {
            @Override
			public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
                if(searchBy == 0)
                {
                	name = cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Columns.COLUMN_NAME));
                }
                else
                {
                	name = cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Columns.COLUMN_CUSTOM_ID));
                }
                _id = cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_ID));              
                _ref_Id = cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_RED_ID));
                // Update the parent class's TextView
            }
        });

        
	}
	String _id = null;
	String _ref_Id = null;
	
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		new SelectDataTask().execute(DBConstant.Location_Columns.CONTENT_URI);
	}
	public void setNameAdapter()
	{
		/*SimpleCursorAdapter adapter = 
	            new SimpleCursorAdapter(this, 
	                    android.R.layout.simple_dropdown_item_1line, null,
	                    fromName, to);*/
		//SA 10007
		//MyCursorAdapter adapter = new MyCursorAdapter(this, R.layout.edt_det_item, null, fromName, to);
		MySearchCustomAdapter adapter = new MySearchCustomAdapter(this, R.layout.edt_delete_item, null, fromName, to);
	    //EA 10007
		searchText.setAdapter(adapter);
	     // Set the CursorToStringConverter, to provide the labels for the
	        // choices to be displayed in the AutoCompleteTextView.
	        adapter.setCursorToStringConverter(new CursorToStringConverter() {
	            @Override
				public String convertToString(android.database.Cursor cursor) {
	                // Get the label for this row out of the "state" column
	                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
	            	int index = cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_NAME);
	            	int index1 = cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_LOCATION);
	            	int index2 = cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_DATE);
	            	String strName = "";
	            	String strLoc = "";
	            	String strDate = "";
	            	if(index != -1)
	            	{
	            		strName = cursor.getString(index);
	            		strLoc = cursor.getString(index1);
	            		strDate = cursor.getString(index2);
	            		//Log.d("TIMESTAMP",  "ID:- " +cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_ID)) + "Name:- " +cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_NAME))); //VIKALP PATEL
	            		//Toast.makeText(getApplicationContext(), "ID:- " +cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_ID)) + "Name:- " +cursor.getString(cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_NAME)), Toast.LENGTH_LONG).show();
	            	}
	                return strName+"-"+strLoc+"-"+strDate;
	            }
	        });
	      // Set the FilterQueryProvider, to run queries for choices
	        // that match the specified input.
	        adapter.setFilterQueryProvider(new FilterQueryProvider() {
	            @Override
				public Cursor runQuery(CharSequence constraint) {
	                // Search for states whose names begin with the specified letters.
	                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
	            	Cursor cursor = getContentResolver().query(DBConstant.Patient_Name_Columns.CONTENT_URI, null, 
	            			//SA 10006			
	            			//DBConstant.Patient_Name_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'" //+ 
	            			//			+ "OR " +
	            			DBConstant.Patient_Name_Columns.COLUMN_NAME_SEARCHALGO + " like '%" + SearchAlgo.getNameSearchAlgo(constraint.toString())+"%'"//ADDED 10006
	            			//EA 10006
	            						//DBConstant.Patient_Name_Columns.COLUMN_CUSTOM_ID + " like '%" + constraint.toString()+"%'"
	            						, null, "0");
	            	Log.i("SearchAlgo", constraint +"-->"+ DBConstant.Patient_Name_Columns.COLUMN_NAME_SEARCHALGO + " like '%" + SearchAlgo.getNameSearchAlgo(constraint.toString())+"%'");//ADDED 10006
	                return cursor;
	            }
	        });
	}
	
	public void setIdAdapter()
	{/*
		SimpleCursorAdapter adapter = 
	            new SimpleCursorAdapter(this, 
	                    android.R.layout.simple_dropdown_item_1line, null,
	                    fromId, to);*/
		MyCursorAdapter adapter = new MyCursorAdapter(this, R.layout.edt_det_item, null, fromId, to);
	        searchText.setAdapter(adapter);
	     // Set the CursorToStringConverter, to provide the labels for the
	        // choices to be displayed in the AutoCompleteTextView.
	        adapter.setCursorToStringConverter(new CursorToStringConverter() {
	            @Override
				public String convertToString(android.database.Cursor cursor) {
	                // Get the label for this row out of the "state" column
	                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
	            	String strId = "";
	            	int index = cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_NAME);
	            	int index1 = cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_LOCATION);
	            	int index2 = cursor.getColumnIndex(DBConstant.Patient_Name_Columns.COLUMN_DATE);
	            	String strLoc = "";
	            	String strDate = "";
	            	if(index != -1)
	            	{
	            		strId = cursor.getString(index);
	            		strLoc = cursor.getString(index1);
	            		strDate = cursor.getString(index2);
	            	}
	                return strId+"-"+strLoc+"-"+strDate;
	            }
	        });
	      // Set the FilterQueryProvider, to run queries for choices
	        // that match the specified input.
	        adapter.setFilterQueryProvider(new FilterQueryProvider() {
	            @Override
				public Cursor runQuery(CharSequence constraint) {
	                // Search for states whose names begin with the specified letters.
	                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
	            	Cursor cursor = getContentResolver().query(DBConstant.Patient_Name_Columns.CONTENT_URI, null, 
	            						//DBConstant.Patient_Name_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%' OR " //+ 
	            						DBConstant.Patient_Name_Columns.COLUMN_CUSTOM_ID + " like '%" + constraint.toString()+"%'"
	            						, null, "1");
	                return cursor;
	            }
	        });
	}
	
	//SA 10009
    public void checkOptions()
    {
    	int i=0;
    	Boolean SX,IPD,OPD,PAY,EXP,RSX,RIPD,ROPD;
    	SX 		=pref.getBoolean("prefIsSX", false);
    	IPD		=pref.getBoolean("prefIsIPD", false);
    	OPD 	=pref.getBoolean("prefIsOPD", false);
    	RSX 	=pref.getBoolean("prefIsRSX", false);
    	ROPD 	=pref.getBoolean("prefIsROPD", false);
    	RIPD 	=pref.getBoolean("prefIsRIPD", false);
    	PAY 	=pref.getBoolean("prefIsPayment", false);
    	EXP 	=pref.getBoolean("prefIsExpense", false);

    	LinearLayout mainLayout = (LinearLayout)findViewById(R.id.ll1);
    	
    	LayoutParams boxSize = (LayoutParams) mainLayout.getLayoutParams();
    	
    	LinearLayout.LayoutParams  llparams = new LinearLayout.LayoutParams(boxSize.width/2,android.view.ViewGroup.LayoutParams.FILL_PARENT,0.5f);
    	llparams.setMargins(7, 7, 7, 7);
    	LinearLayout.LayoutParams  innerllparams = new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT,android.view.ViewGroup.LayoutParams.FILL_PARENT,0.7f);
    	LinearLayout.LayoutParams  imgparams = new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT,android.view.ViewGroup.LayoutParams.FILL_PARENT,0.3f);
    	LinearLayout.LayoutParams  innerimgparams = new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
    	
    	if(SX)
    	{
    		
    		LinearLayout l = new LinearLayout(this);
    		l.setBackgroundResource(R.drawable.grey_rect_shape);
    		l.setOrientation(LinearLayout.VERTICAL);
    		l.setLayoutParams(llparams);
    		
    		ImageView iv = new ImageView(this);
    		iv.setBackgroundResource(R.drawable.surgery);
    		iv.setLayoutParams(imgparams);
    		iv.setScaleType(ScaleType.FIT_CENTER);
    		
    		LinearLayout innerLayout = new LinearLayout(this);
    		innerLayout.setLayoutParams(innerllparams);
    		innerLayout.setOrientation(LinearLayout.HORIZONTAL);
    		innerLayout.setPadding(6, 0, 6, 0);
    		innerLayout.setGravity(Gravity.CENTER);
    		
    		ImageView inneriv= new ImageView(this);
    		inneriv.setLayoutParams(innerimgparams);
    		inneriv.setBackgroundResource(R.drawable.add_sx_icon);
    		
    		TextView tv = new TextView(this);
    		tv.setLayoutParams(innerimgparams);
    		tv.setTextColor(color.blue_btn_bg);
    		tv.setPadding(6, 0, 0, 0);
    		tv.setTextAppearance(this, R.style.boldText);
    		tv.setText("Add Sx");
    		
    		innerLayout.addView(inneriv);
    		innerLayout.addView(tv);
    		
    		l.addView(iv);
    		l.addView(innerLayout);
    		
    		mainLayout.addView(l);
    	}
    	
    	
    	
    	if(RSX)
    	{
    		
    		LinearLayout l = new LinearLayout(this);
    		l.setBackgroundResource(R.drawable.grey_rect_shape);
    		l.setOrientation(LinearLayout.VERTICAL);
    		l.setLayoutParams(llparams);
    		
    		ImageView iv = new ImageView(this);
    		iv.setBackgroundResource(R.drawable.surgery);
    		iv.setLayoutParams(imgparams);
    		iv.setScaleType(ScaleType.FIT_CENTER);
    		
    		LinearLayout innerLayout = new LinearLayout(this);
    		innerLayout.setLayoutParams(innerllparams);
    		innerLayout.setOrientation(LinearLayout.HORIZONTAL);
    		innerLayout.setPadding(6, 0, 6, 0);
    		innerLayout.setGravity(Gravity.CENTER);
    		
    		ImageView inneriv= new ImageView(this);
    		inneriv.setLayoutParams(innerimgparams);
    		inneriv.setBackgroundResource(R.drawable.recored_blue_icon);
    		
    		TextView tv = new TextView(this);
    		tv.setLayoutParams(innerimgparams);
    		tv.setTextColor(color.blue_btn_bg);
    		tv.setPadding(6, 0, 0, 0);
    		tv.setTextAppearance(this, R.style.boldText);
    		tv.setText("Record SX");
    		
    		innerLayout.addView(inneriv);
    		innerLayout.addView(tv);
    		
    		l.addView(iv);
    		l.addView(innerLayout);
    		
    		mainLayout.addView(l);
    	}
    }
	//EA 10009
	
	//SA 10007
	@SuppressWarnings("deprecation")
	public void deletePatient(final View v) {
		InputMethodManager imm = (InputMethodManager)getSystemService(
			      Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(searchText.getWindowToken(), 0);
		AlertDialog alertDialog = new AlertDialog.Builder(this).create();
		alertDialog.setTitle("Delete Patient");
		alertDialog.setMessage("Are you sure want to delete it?");
		alertDialog.setButton("Delete", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				try{
					String _id=v.getTag().toString();
					boolean d,e,f,g= false;
					d= SmartConsultant.getApplication().getContentResolver().delete(DBConstant.Patient_Name_Columns.CONTENT_URI, "_id=?", new String[] { _id }) > 0;
					e= SmartConsultant.getApplication().getContentResolver().delete(DBConstant.DISTINCT_CONTENT_URI, "_id=?", new String[] { _id }) > 0;
					f= SmartConsultant.getApplication().getContentResolver().delete(DBConstant.Patient_Temp_Columns.CONTENT_URI, "_id=?", new String[] { _id }) > 0;
					g= SmartConsultant.getApplication().getContentResolver().delete(DBConstant.Patient_Details_Columns.CONTENT_URI, "patient_id=?", new String[] { _id }) > 0;//ADDED 10008
						if( d && e && f )
							{
							CustomToast.showToastMessage(getApplicationContext(), "Patient record successfully deleted!");
							}
						else
						{
							CustomToast.showToastMessage(getApplicationContext(), "Error while deleting record!");
						}
				Log.i("DELETE", v.getTag().toString());
					}
				catch(Exception e)
				{
					Log.e("DELETE PATIENT:-",e.toString());
				}
			}
		});
		
		alertDialog.setButton2("Cancel", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				CustomToast.showToastMessage(getApplicationContext(), "Delete has been cancelled!");
			}
		});
		alertDialog.show();
		searchText.setText("");
	}
	//EA 10007
	
	public boolean compareString(String str1, String str2)
	{
		str1 = str1.toLowerCase();
		str2 = str2.toLowerCase();
		
		if(str1.startsWith(str2))
		{
			return true;
		}
		else 
		{
			return false;
		}
	}
	public void startNextActivity(String _id, String name, String type)
	{
		if(type.equalsIgnoreCase("SX"))
		{
			Intent i = new Intent(this, AddSxSearchActivity.class);
			i.putExtra("id", _id);
			i.putExtra("name", name);
			i.putExtra("type", type);
			startActivity(i);
		}
		else if(type.equalsIgnoreCase("IPD"))
		{
			Intent i = new Intent(this, AddIPDSearchActivity.class);
			i.putExtra("id", _id);
			i.putExtra("name", name);
			i.putExtra("type", type);
			startActivity(i);
		}
		else if(type.equalsIgnoreCase("OPD"))
		{
			Intent i = new Intent(this, AddOPDSearchActivity.class);
			i.putExtra("id", _id);
			i.putExtra("name", name);
			i.putExtra("type", type);
			startActivity(i);
		}
	}
	
	public static final int MESSAGE = 101;
	public static final int LOCATION = 102;
	public static final int SEARCH = 103;
	@Override
	protected Dialog onCreateDialog(int id) {
		// TODO Auto-generated method stub
		switch (id)
		{
		case MESSAGE:
			AlertDialog.Builder builder1 = new Builder(this);
			builder1.setTitle(R.string.app_name);
			builder1.setMessage("Problem in Login. \nPlease try again later.");
			builder1.setPositiveButton("Ok", new DialogInterface.OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					removeDialog(MESSAGE);
				}
			});
			return builder1.create();
		case LOCATION:
			AlertDialog.Builder locationBuilder = new Builder(this);
			locationBuilder.setTitle("Select Location");
			locationBuilder.setSingleChoiceItems(data, 0, new OnClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					//myLocationCursor.move(which);
					String str = data[which];//myLocationCursor.getString(myLocationCursor.getColumnIndex(DBConstant.Location_Columns.COLUMN_NAME));
					//Toast.makeText(HomeActivity.this, str, Toast.LENGTH_LONG).show();
					removeDialog(LOCATION);
					Intent i = null;
					if(currentRecording == 0)
					{
						i = new Intent(HomeActivity.this, RecorderActivity.class);
						i.putExtra("title", "Record SX");
						i.putExtra("type",  "0");
					}
					else if(currentRecording == 1)
					{
						i = new Intent(HomeActivity.this, RecorderActivity.class);
						i.putExtra("title", "Record IPD");
						i.putExtra("type",  "1");
					}
					else if(currentRecording == 2)
					{
						i = new Intent(HomeActivity.this, RecorderActivity.class);
						i.putExtra("title", "Record OPD");
						i.putExtra("type",  "2");
					}
					i.putExtra("loc", str);
					startActivity(i);
				}
			});
			/*locationBuilder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					removeDialog(MESSAGE);
				}
			});*/
			return locationBuilder.create();
			
		case SEARCH:
			AlertDialog.Builder search = new Builder(this);
			String[] items = new String[]{"By Name", "By ID"};
			search.setSingleChoiceItems(items, searchBy, new OnClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					removeDialog(SEARCH);
					Intent i = null;
					searchBy = which;
					if(which == 0)
					{
						setNameAdapter();
					}
					else if(which == 1)
					{
						setIdAdapter();
					}
				}
			});
			search.setOnCancelListener(new OnCancelListener() {
				
				@Override
				public void onCancel(DialogInterface arg0) {
					// TODO Auto-generated method stub
					name = null;
					searchBy = -1;
				}
			});
			return search.create();
		}
		return super.onCreateDialog(id);
	}	
	public void onSearchClick(View v)
	{
		
	}
	
	private class SelectDataTask extends AsyncTask<Uri, Void ,Cursor> {

		Uri currentUri;
		@Override
		protected void onPreExecute() {
			// this.dialog.setMessage("Getting Names...");
			// this.dialog.show();
		}

		// can use UI thread here
		@Override
		protected void onPostExecute(final Cursor result) {

			startManagingCursor(result);
			myLocationCursor = result;
			
			if(myLocationCursor != null && myLocationCursor.getCount() > 0)
			{
				data = new String[myLocationCursor.getCount()];
				
				int i = 0;
				while(myLocationCursor.moveToNext())
				{
					data[i] = myLocationCursor.getString(myLocationCursor.getColumnIndex(DBConstant.Location_Columns.COLUMN_NAME));
					i++;
				}
			}
		}

		@Override
		protected Cursor doInBackground(Uri... arg0) {
			// TODO Auto-generated method stub
			try {
				currentUri = arg0[0];
				return HomeActivity.this.getContentResolver().query(currentUri, null, null, null, null);
			} catch (SQLException sqle) {
				throw sqle;
			}
		}
	}
	public void onAddSXClick(View v)
	{
		if(name != null && name.length() > 0 && searchText.getText().toString().length() > 0)
		{
			Intent i = new Intent(this, AddSxSearchActivity.class);
			i.putExtra("name", _ref_Id);
			i.putExtra("_id", _id);
			i.putExtra("searchBy", searchBy);
			startActivity(i);
		}
		else
		{
			Intent i = new Intent(this, AddSxActivity.class);
			startActivity(i);
		}
		searchText.setText("");
		name = null;
		searchBy = -1;
		/*try
		{
			ServiceDelegate.postRecordedFile1(null, RequestBuilder.getUploadData(), AppConstants.URLS.BASE_URL + AppConstants.URLS.MEDIA_UPLOAD_URL);
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}*/
	}
	
	int currentRecording = -1;
	public void onRecordSXClick(View v)
	{
		if(myLocationCursor != null && myLocationCursor.getCount() > 0)
		{
			currentRecording = 0;
			/*Intent i = new Intent(this, RecorderActivity.class);
			i.putExtra("title", "Record SX");
			startActivity(i);*/
			
			//showDialog(LOCATION);
			newLocationFragment = new LocationDialogFragment();
			newLocationFragment.show(getSupportFragmentManager(), "No location found.");
		}
		else
		{
			DialogFragment newFragment = new FireMissilesDialogFragment();
		    newFragment.show(getSupportFragmentManager(), "No location found.");
		}
	}
	
	public void onAddIPDClick(View v)
	{
		if(name != null && name.length() > 0 && searchText.getText().toString().length() > 0)
		{
			Intent i = new Intent(this, AddIPDSearchActivity.class);
			i.putExtra("name", _ref_Id);
			i.putExtra("_id", _id);
			i.putExtra("searchBy", searchBy);
			startActivity(i);
		}
		else
		{	
			Intent i = new Intent(this, AddIPDActivity.class);
			startActivity(i);
		}
		searchText.setText("");
		name = null;
		searchBy = -1;
	}
	
	DialogFragment newLocationFragment = null;
	public void onRecordIPDClick(View v)
	{
		/*Intent i = new Intent(this, RecorderActivity.class);
		i.putExtra("title", "Record IPD");
		startActivity(i);*/
		if(myLocationCursor != null && myLocationCursor.getCount() > 0)
		{
			currentRecording = 1;
			newLocationFragment = new LocationDialogFragment();
			newLocationFragment.show(getSupportFragmentManager(), "No location found.");
		}
		else
		{
			DialogFragment newFragment = new FireMissilesDialogFragment();
		    newFragment.show(getSupportFragmentManager(), "No location found.");
		}
	}
	
	public void onAddOPDClick(View v)
	{
		if(name != null && name.length() > 0 && searchText.getText().toString().length() > 0)
		{
			Intent i = new Intent(this, AddOPDSearchActivity.class);
			i.putExtra("name", _ref_Id);
			i.putExtra("_id", _id);
			i.putExtra("searchBy", searchBy);
			startActivity(i);
		}
		else
		{
			Intent i = new Intent(this, AddOPDActivity.class);
			startActivity(i);
		}
		searchText.setText("");
		name = null;
		searchBy = -1;
	}
	
	public void onRecordOPDClick(View v)
	{
		/*Intent i = new Intent(this, RecorderActivity.class);
		i.putExtra("title", "Record OPD");
		startActivity(i);*/
		if(myLocationCursor != null && myLocationCursor.getCount() > 0)
		{
			currentRecording = 2;
			newLocationFragment = new LocationDialogFragment();
			newLocationFragment.show(getSupportFragmentManager(), "No location found.");
		}
		else
		{
			DialogFragment newFragment = new FireMissilesDialogFragment();
		    newFragment.show(getSupportFragmentManager(), "No location found.");
		}
	}
	
	public void onSetupClick(View v)
	{
		//Intent i = new Intent(this, SetupHomeActivity.class); SC10001 VIKALP PATEL
		Intent i = new Intent(this, AddPaymentActivity.class);
		startActivity(i);
	}
	
	public void onExpensesClick(View v)
	{
		Intent i = new Intent(this, NewExpensesActivity.class);
		startActivity(i);
	}	
	@Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.menu, menu);
        return true;
    }
     
    /**
     * Event Handling for Individual menu item selected
     * Identify single menu item by it's id
     * */
    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
         
        switch (item.getItemId())
        {
        case R.id.mnuHelp:
        	Intent i = new Intent(this, HelpActivity.class);
        	i.putExtra("caller", "home");
        	startActivity(i);
            return true;
        case R.id.mnuSettings: //SA10002 VIKALP PATEL
        	//SA 10004
        	//Intent iSettings = new Intent(this,SetupHomeActivity.class);
        	Intent iSettings = new Intent(this,PrefsActivity.class);
        	//EA 10004
        	//startActivity(iSettings); //EA10002
        	startActivityForResult(iSettings, SETTINGS);//ADDED 10005
        	return true;
        	//SA 10004
       /* case R.id.mnuSetup: //SA10002 VIKALP PATEL
        	//SA 10004
        	//Intent iSettings = new Intent(this,SetupHomeActivity.class);
        	Intent iSetup = new Intent(this,SetupHomeActivity.class);
        	//EA 10004
        	startActivity(iSetup); //EA10002
        	return true;
        	//EA 10004*/
        default:
            return super.onOptionsItemSelected(item);
        }
    }   
    
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
			if (requestCode == SETTINGS) {
				Intent intent = getIntent();
				finish();
				startActivity(intent);
			}
	}
    
    
    public class FireMissilesDialogFragment extends DialogFragment {
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            // Use the Builder class for convenient dialog construction
            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
            builder.setMessage(" No location found. \n Click on Add to manager locations")
                   .setPositiveButton("Add", new DialogInterface.OnClickListener() {
                       @Override
					public void onClick(DialogInterface dialog, int id) {
                           // FIRE ZE MISSILES!
                    	   Intent i = new Intent(HomeActivity.this, ManageLOVActivity.class);
                   			startActivity(i);
                       }
                   })
                   .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                       @Override
					public void onClick(DialogInterface dialog, int id) {
                           // User cancelled the dialog
                       }
                   });
            // Create the AlertDialog object and return it
            return builder.create();
        }
    }
    
    public class LocationDialogFragment extends DialogFragment {
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            // Use the Builder class for convenient dialog construction
        	AlertDialog.Builder locationBuilder = new Builder(HomeActivity.this);
			locationBuilder.setTitle("Select Location");
			locationBuilder.setSingleChoiceItems(data, 0, new OnClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					//myLocationCursor.move(which);
					String str = data[which];//myLocationCursor.getString(myLocationCursor.getColumnIndex(DBConstant.Location_Columns.COLUMN_NAME));
					//Toast.makeText(HomeActivity.this, str, Toast.LENGTH_LONG).show();
					Intent i = null;
					if(currentRecording == 0)
					{
						i = new Intent(HomeActivity.this, RecorderActivity.class);
						i.putExtra("title", "Record SX");
						i.putExtra("type",  "0");
					}
					else if(currentRecording == 1)
					{
						i = new Intent(HomeActivity.this, RecorderActivity.class);
						i.putExtra("title", "Record IPD");
						i.putExtra("type",  "1");
					}
					else if(currentRecording == 2)
					{
						i = new Intent(HomeActivity.this, RecorderActivity.class);
						i.putExtra("title", "Record OPD");
						i.putExtra("type",  "2");
					}
					i.putExtra("loc", str);
					startActivity(i);
					newLocationFragment.dismiss();
				}
			});
			return locationBuilder.create();
        }
    }
}
