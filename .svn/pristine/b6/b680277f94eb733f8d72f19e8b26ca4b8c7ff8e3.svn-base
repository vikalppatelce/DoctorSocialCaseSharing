/* HISTORY
 * CATEGORY 		:- ACTIVITY
 * DEVELOPER		:- VIKALP PATEL
 * AIM			    :- ADD IPD ACTIVITY
 * DESCRIPTION 		:- SAVE IPD
 * 
 * S - START E- END  C- COMMENTED  U -EDITED A -ADDED
 * --------------------------------------------------------------------------------------------------------------------
 * INDEX       DEVELOPER		DATE			FUNCTION		DESCRIPTION
 * --------------------------------------------------------------------------------------------------------------------
 * 10001       VIKALP PATEL    07/01/2014       				CUSTOMIZED TOOLTIP DEPRECEATED
 * 10002   	   VIKALP PATEL    09/01/2014						INITCAP VALUES WHILE SAVING INTO DATABASE.
 * 10003       VIKALP PATEL    10/01/2014       				APPLYING FULLSCREEN THROUGH PREFERENCES.
 * 10004	   VIKALP PATEL	   13/01/2014       				APPLYING PROPER VALIDATION ON MANDATORY FIELDS.
 * 10005       VIKALP PATEL    13/01/2014       				APPLYING TOOLTIP
 * 10006       VIKALP PATEL    13/01/2014       				ADD SEARCH ALGO ON PATIENT NAME.
 * 10007       VIKALP PATEL    15/01/2014       				INDIVIDUAL SETTINGS
 * 10008       VIKALP PATEL    16/01/2014                       SURGICAL NOTES PICTURE ON OFF
 * 10009       VIKALP PATEL    17/01/2014                       SAVING SURGICAL NOTES IN DATABASE TABLE(PATIENT DETAILS)
 * 10010       VIKALP PATEL    17/01/2014                       ADDED SERVICE TYPE COLUMN IN PATIENT TEMP TABLE
 * 10013       VIKALP PATEL    20/01/2014                       LAYOUT RE-DESIGNED
 * 10014	   VIKALP PATEL    20/01/2014						CUSTOM-TOAST ON SAVE
 * 10015	   VIKALP PATEL    21/01/2014						TOOLTIP EVENT CHANGE TO ONFOCUS
 * 10017       VIKALP PATEL    23/01/2014						TAKE PICTURE REPLACES WITH ADD PICTURE
 * 10018 	   VIKALP PATEL    23/01/2014						IMAGE COMPRESSION ON PICTURES
 * --------------------------------------------------------------------------------------------------------------------
 */

package com.netdoers.com.ui;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.provider.MediaStore.MediaColumns;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FilterQueryProvider;
import android.widget.Gallery;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SimpleCursorAdapter;
import android.widget.SimpleCursorAdapter.CursorToStringConverter;
import android.widget.Toast;

import com.netdoers.com.CustomToast;
import com.netdoers.com.SmartConsultant;
import com.netdoers.com.dto.DBConstant;
import com.netdoers.com.utils.AppConstants;
import com.netdoers.com.utils.ImageCompression;
import com.netdoers.com.utils.InitCap;
import com.netdoers.com.utils.SearchAlgo;
import com.smarthumanoid.com.R;

@SuppressLint({ "ValidFragment", "NewApi" })
public class AddIPDActivity extends FragmentActivity {

	EditText addSxId;
	EditText addSxName;
	AutoCompleteTextView addSxLocation;
	EditText addSxAge;
	EditText addIpdTotalCount;
	EditText addSxDiagnose;
	EditText addSxDate;
	AutoCompleteTextView addSxWard;
	CheckBox addSxEmergency;
	AutoCompleteTextView addIpdReferredBy;
	AutoCompleteTextView addSxType;
	EditText note;
	private RadioGroup radioSexGroup;
	RadioButton btnMale;
	RadioButton btnFemale;
	InitCap initCap;// ADDED 10002
	SharedPreferences pref; //ADDED 1003
	public static final int SECSETTINGS = 1007;//ADDED 10007
	Gallery gallery;//SA 10008
	LinearLayout surgicalPic;
	Uri currentFileUri;
	final int REQUEST_CAMERA = 1001;
	final int REQUEST_SMARTHUMANOID_CAMERA = 1002; 
	ArrayList<Bitmap> data;
	ArrayList<String> paths;
	ImagesAdapter imagesAdapter = null;//EA 10008
	Cursor patientCursor;//ADDED 10009
	String _id=null;//ADDED 10009
	public static final int PIC = 117;//SA 10017
	public static final int IMPORT_PICTURE = 118;
	Uri outputFileUri;//EA 10017
	String compressedPath;//ADDED 10018
	
	
	final static int[] to = new int[] { R.id.txtText };
	final static String[] from = new String[] { DBConstant.Patient_Columns.COLUMN_NAME };
	final static String[] projection = { DBConstant.Patient_Columns.COLUMN_ID,
			DBConstant.Patient_Columns.COLUMN_NAME,
			DBConstant.Patient_Columns.COLUMN_TYPE,
			DBConstant.Patient_Columns.COLUMN_SERVICE_TYPE };

	SimpleCursorAdapter adapter;

	SimpleCursorAdapter locationAdapter;
	SimpleCursorAdapter wardAdapter;
	SimpleCursorAdapter typeAdapter;
	SimpleCursorAdapter referredByAdapter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		//SA 10003
		pref = PreferenceManager.getDefaultSharedPreferences(SmartConsultant.getApplication());
		if(pref.getBoolean("prefIsFullScreen", false))
		{
			//setTheme(R.style.FullScreen);
			requestWindowFeature(Window.FEATURE_NO_TITLE);
	        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
		}
		//EA 10003
		//SA 10013
		//setContentView(R.layout.add_ipd);
		setContentView(R.layout.new_add_ipd);
		//EA 10013
		
		initializeData();
		// EA10001
		initCap = new InitCap();// ADDED 10002
		addSxId = (EditText) findViewById(R.id.add_sx_id);
		addSxName = (EditText) findViewById(R.id.add_sx_name);
		addSxLocation = (AutoCompleteTextView) findViewById(R.id.add_sx_location);
		gallery = (Gallery)findViewById(R.id.imagePreview);//SA 10008
		surgicalPic = (LinearLayout)findViewById(R.id.surgicalPic);
		gallery.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				Intent i = new Intent(AddIPDActivity.this, DetailedImage.class);
				i.putExtra("url", paths.get(arg2));
				startActivity(i);
			}
		});
		//EA 10008
		setLocationAdapter();
		addSxAge = (EditText) findViewById(R.id.add_sx_age);
		addIpdTotalCount = (EditText) findViewById(R.id.add_sx_totalCount);
		addSxDiagnose = (EditText) findViewById(R.id.add_sx_diagnose);
		addSxDate = (EditText) findViewById(R.id.add_sx_date);
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String date = sdf.format(new Date(System.currentTimeMillis()));
		if (date.contains("/")) {
			date = date.replace("/", "-");
		}
		addSxDate.setText(date);

		addSxWard = (AutoCompleteTextView) findViewById(R.id.add_sx_ward);
		setWardAdapter();

		addSxEmergency = (CheckBox) findViewById(R.id.add_sx_manager_emergency);
		addIpdReferredBy = (AutoCompleteTextView) findViewById(R.id.add_sx_referred_by);
		setReferredByAdapter();

		addSxType = (AutoCompleteTextView) findViewById(R.id.add_sx_patient_type);
		setTypeAdapter();

		note = (EditText) findViewById(R.id.add_sx_note);
		radioSexGroup = (RadioGroup) findViewById(R.id.radioSex);

		btnMale = (RadioButton) findViewById(R.id.radioMale);
		btnFemale = (RadioButton) findViewById(R.id.radioFemale);
		//SA 10005
		if(pref.getBoolean("prefIsToolTip", false) || pref.getBoolean("prefIsIPDToolTip", false)) //EDITED 10007
		{
			onToolTipOn();
		}
		//EA 10005
		//SA 10008
		data = new ArrayList<Bitmap>();
		imagesAdapter = new ImagesAdapter(this, data);
		gallery.setAdapter(imagesAdapter);
		paths =  new ArrayList<String>();
		if(pref.getBoolean("prefIsIPDSurgicalNotes", false))
		{
			surgicalPic.setVisibility(1);
			gallery.setVisibility(1);
		}
		//EA 10008
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater menuInflater = getMenuInflater();
		menuInflater.inflate(R.menu.menu, menu);
		return true;
	}
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		switch (item.getItemId()) {
		case com.smarthumanoid.com.R.id.mnuHelp:
			Intent i = new Intent(this, HelpActivity.class);
			i.putExtra("caller", "ipd");
			startActivity(i);
			return true;
			//SA 10007
		case com.smarthumanoid.com.R.id.mnuSettings:
			Intent in = new Intent(this, PrefsSecondaryActivity.class);
			in.putExtra("caller", "ipd");
			startActivityForResult(in, SECSETTINGS);
			return true;
			//EA 10007
		default:
			return super.onOptionsItemSelected(item);
		}
	}
	
	ArrayList<String> strLocation = new ArrayList<String>();
	ArrayList<String> strWard = new ArrayList<String>();

	ArrayList<String> strType = new ArrayList<String>();
	ArrayList<String> strRef = new ArrayList<String>();

	public void initializeData() {
		strLocation = SmartConsultant.getApplication().loadLocation();
		strWard = SmartConsultant.getApplication().loadWard();
		strType = SmartConsultant.getApplication().loadType();
		strRef = SmartConsultant.getApplication().loadRef();
	}

	public void addLocation() {
		String s = initCap.toTitleCase(addSxLocation.getText().toString());// EDITED 10002
		if (s != null && s.length() > 0 && !strLocation.contains(new String(s))) {
			addContent(DBConstant.Location_Columns.CONTENT_URI, s);
		}
	}

	public void addWard() {
		String s = initCap.toTitleCase(addSxWard.getText().toString());// EDITED 10002
		if (s != null && s.length() > 0 && !strWard.contains(new String(s))) {
			addContent(DBConstant.Ward_Columns.CONTENT_URI, s);
		}
	}

	public void addType() {
		String s = initCap.toTitleCase(addSxType.getText().toString());// EDITED 10002
		if (s != null && s.length() > 0 && !strType.contains(new String(s))) {
			addContent(DBConstant.Types_Columns.CONTENT_URI, s);
		}
	}

	public void addRef() {
		String s = initCap.toTitleCase(addIpdReferredBy.getText().toString());// EDITED
																				// 10002
		if (s != null && s.length() > 0 && !strRef.contains(new String(s))) {
			addContent(DBConstant.Ref_Columns.CONTENT_URI, s);
		}
	}

	public void addContent(Uri uri, String str) {
		ContentValues values = new ContentValues();
		str = initCap.toTitleCase(str);// ADDED 10002
		values.put(DBConstant.Location_Columns.COLUMN_NAME, str);
		values.put(DBConstant.Location_Columns.COLUMN_SYNC_STATUS, 0);
		getContentResolver().insert(uri, values);
	}

	public void startManagerScreen(int index, int reqCode) {
		Intent i = new Intent(this, ManageLOVActivity.class);
		i.putExtra("index", index);
		startActivityForResult(i, reqCode);
	}

	int currentRequestCode = -1;
	String currentSelection = null;

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		if (data != null) {
			currentSelection = data.getStringExtra("data");
		}
		currentRequestCode = requestCode;
		if (resultCode == RESULT_OK) {
			clearDataStructure();
			onDataLoaded(currentSelection);
		}
		
		// SA 10008
		Bitmap bm = null;
		if (resultCode == RESULT_OK) {
			//SA 10017
			if (requestCode == IMPORT_PICTURE) {
				
				Uri selectedImage = data.getData();
				String[] filePathColumn = { MediaColumns.DATA };
				Cursor cursor = getContentResolver().query(selectedImage,filePathColumn, null, null, null);
				cursor.moveToFirst();
				int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
				String picturePath = cursor.getString(columnIndex);
				cursor.close();
				
				getImagePath();
				try {
					copy(new File(picturePath), new File(currentFileUri.getPath()));
					} 
				catch (IOException e) 
				{
					Log.e("IMPORT_PICTURE", e.toString());
				}
		         
				BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
				btmapOptions.inSampleSize = 2;
				bm = BitmapFactory.decodeFile(picturePath,btmapOptions);
				AddIPDActivity.this.data.add(bm);
				imagesAdapter.notifyDataSetChanged();
				compressedPath = ImageCompression.compressImage(currentFileUri.getPath());//ADDED 10018
				galleryAddPic();
				paths.add(compressedPath);//EDITED 10018
			}
			//EA 10017
			if (requestCode == REQUEST_CAMERA) {
				BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
				btmapOptions.inSampleSize = 2;
				bm = BitmapFactory.decodeFile(currentFileUri.getPath(),btmapOptions);
				AddIPDActivity.this.data.add(bm);
				imagesAdapter.notifyDataSetChanged();
				compressedPath = ImageCompression.compressImage(currentFileUri.getPath());//ADDED 10018
				galleryAddPic();
				paths.add(compressedPath);//EDITED 10018
			}

			if (requestCode == REQUEST_SMARTHUMANOID_CAMERA) {

				if (resultCode == RESULT_OK) {
					BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
					btmapOptions.inSampleSize = 2;
					bm = BitmapFactory.decodeFile(currentFileUri.getPath(),btmapOptions);
					AddIPDActivity.this.data.add(bm);
					imagesAdapter.notifyDataSetChanged();
					compressedPath = ImageCompression.compressImage(currentFileUri.getPath());//ADDED 10018
					galleryAddPic();
					paths.add(compressedPath);//EDITED 10018
				} else {
					Toast.makeText(getApplicationContext(),"Error while taking picture!", Toast.LENGTH_SHORT).show();
				}
			}
		}
		// EA 10008
		// SA 10007
		if (requestCode == SECSETTINGS) {
			Intent intent = getIntent();
			finish();
			startActivity(intent);
		}
		// EA 10007

	}

	public void onManageLocation(View v) {
		startManagerScreen(0, 100);
	}

	public void onManageWard(View v) {
		startManagerScreen(2, 104);
	}

	public void onManageReferredBy(View v) {
		startManagerScreen(5, 107);
	}

	public void onManagePatientType(View v) {
		startManagerScreen(4, 106);
	}
	public void clearDataStructure() {
	}
	public void onTime(View v) {
		DialogFragment newFragment = new FromDatePickerFragment();
		newFragment.show(getSupportFragmentManager(), "From Date");
	}
	//SA 10017
	@SuppressWarnings("deprecation")
	public void onAddPicture(View v)
	{
		showDialog(PIC);
	}
	//EA 10017
	//SA 10008
	public void onTakePicture(View v)
	{
		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		getImagePath();
		intent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri);
  		pref = PreferenceManager.getDefaultSharedPreferences(SmartConsultant.getApplication());
  		if(pref.getBoolean("prefSmartHumanoidCamera", false))
  		{
  			Intent cameraIntent = new Intent(getApplicationContext(),CameraActivity.class);
  	        cameraIntent.putExtra("FILE_URI", outputFileUri.toString());
  	        startActivityForResult(cameraIntent, REQUEST_SMARTHUMANOID_CAMERA);
  		}
  		else
  		{
  			startActivityForResult(intent, REQUEST_CAMERA);
  		}
	}

	//SA 10017
	public void getImagePath()
	{
		File imageDirectory =null;
		String state = Environment.getExternalStorageState();
		if (Environment.MEDIA_MOUNTED.equals(state)) 
		{
			imageDirectory = new File(AppConstants.IMAGE_DIRECTORY_PATH);
		}
		else
		{
			imageDirectory = new File(AppConstants.IMAGE_DIRECTORY_PATH_DATA);
		}

		imageDirectory.mkdirs();
		File tempFile = new File(imageDirectory, getVideoName()+ AppConstants.EXTENSION);
		outputFileUri = Uri.fromFile( tempFile );
		currentFileUri = outputFileUri;
	}
	
	public void copy(File src, File dst) throws IOException {
	    InputStream in = new FileInputStream(src);
	    OutputStream out = new FileOutputStream(dst);

	    // Transfer bytes from in to out
	    byte[] buf = new byte[1024];
	    int len;
	    while ((len = in.read(buf)) > 0) {
	        out.write(buf, 0, len);
	    }
	    in.close();
	    out.close();
	}
	
	public void onImportPicture(View v)
	{
		Intent i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
		startActivityForResult(i, IMPORT_PICTURE);
	}
	
	@Override
	protected void onPrepareDialog(int id, Dialog dialog) {
		switch (id) {
		case PIC:
			final AlertDialog alertDialog = (AlertDialog) dialog;
			Button import_picture = (Button) alertDialog.findViewById(R.id.import_picture);
			Button take_picture = (Button) alertDialog.findViewById(R.id.take_picture);
			import_picture.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View v) {
					onImportPicture(v);
					alertDialog.dismiss();
				}
			});
			take_picture.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View v) {
					onTakePicture(v);
					alertDialog.dismiss();
				}
			});
			break;
		}
	}
		
	//EA 10017
	
	
	public static String getVideoName()
	{
		String name = "smartConsultant";
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		try {
			name = sdf.format(new Date(System.currentTimeMillis()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return name;
	}
	
	private void galleryAddPic() {
	    Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
	    File f = new File(currentFileUri.getPath());
	    Uri contentUri = Uri.fromFile(f);
	    mediaScanIntent.setData(contentUri);
	    this.sendBroadcast(mediaScanIntent);
	}
	
//EA 10008
	
	
	class FromDatePickerFragment extends DialogFragment implements
			OnDateSetListener {

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current time as the default values for the picker
			final Calendar c = Calendar.getInstance();
			int yr = c.get(Calendar.YEAR);
			int mnth = c.get(Calendar.MONTH);
			int day = c.get(Calendar.DAY_OF_MONTH);
			// Create a new instance of TimePickerDialog and return it
			return new DatePickerDialog(getActivity(), this, yr, mnth, day);
		}

		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear,
				int dayOfMonth) {
			// TODO Auto-generated method stub
			String date;
			monthOfYear++;
			if (dayOfMonth < 10) {
				date = "0" + dayOfMonth + "-";
			} else {
				date = dayOfMonth + "-";
			}
			if (monthOfYear < 10) {
				date += "0" + monthOfYear + "-";
			} else {
				date += monthOfYear + "-";
			}

			date += year;
			// addSxDate.setText(dayOfMonth+"-"+monthOfYear+"-"+year);
			addSxDate.setText(date);
		}
	}

	public void save() {
		// Toast.makeText(this, "Data saved", Toast.LENGTH_LONG).show();
		Bundle b = new Bundle();
		b.putString("message", "Saving IPD");
		showDialog(LOADING, b);
		ContentValues contentValues = new ContentValues();
		ContentValues contentValuesTemp = new ContentValues();

		String nm = initCap.toTitleCase(addSxName.getText().toString()); // EDITED
																			// 10002
		contentValues.put(DBConstant.Patient_Columns.COLUMN_CUSTOM_ID, addSxId
				.getText().toString());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_CUSTOM_ID,
				addSxId.getText().toString());

		contentValues.put(DBConstant.Patient_Columns.COLUMN_NAME, nm);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_NAME, nm);

		ContentValues name = new ContentValues();
		name.put(DBConstant.Patient_Name_Columns.COLUMN_NAME, nm);
		name.put(DBConstant.Patient_Name_Columns.COLUMN_CUSTOM_ID, addSxId
				.getText().toString());

		//SA 10006
		name.put(DBConstant.Patient_Name_Columns.COLUMN_NAME_SEARCHALGO, initCap.toTitleCase(SearchAlgo.getNameSearchAlgo(nm)));
		//EA 10006
		String loc = "";
		{
			loc = initCap.toTitleCase(addSxLocation.getText().toString());// EDITED
																			// 10002
		}
		addLocation();
		contentValues.put(DBConstant.Patient_Columns.COLUMN_LOCATION, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_LOCATION,
				loc);
		name.put(DBConstant.Patient_Name_Columns.COLUMN_LOCATION, loc);

		String strAge = addSxAge.getText().toString();// ADDED
														// 10002
		contentValues.put(DBConstant.Patient_Columns.COLUMN_AGE, strAge);// EDITED
																			// 10002
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_AGE,
				strAge);// EDITED 10002

		String strIpdCount = addIpdTotalCount.getText().toString();// ADDED
																	// 10002
		contentValues.put(DBConstant.Patient_Columns.COLUMN_TOTALCOUNT,
				strIpdCount); // EDITED 10002
		contentValuesTemp.put(
				DBConstant.Patient_Temp_Columns.COLUMN_TOTALCOUNT, strIpdCount);// EDITED
																				// 10002

		String strSxDiag = initCap.toTitleCase(addSxDiagnose.getText()
				.toString());// ADDED 10002
		contentValues.put(DBConstant.Patient_Columns.COLUMN_DIAGNOSIS,
				strSxDiag);// EDITED 10002
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_DIAGNOSIS,
				strSxDiag);// EDITED 10002

		loc = "";
		if (!addSxDate.getText().toString().equals("Date : DD-MM-YYYY")) {
			loc = addSxDate.getText().toString();
		}

		contentValues.put(DBConstant.Patient_Columns.COLUMN_DATE, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_DATE, loc);
		name.put(DBConstant.Patient_Name_Columns.COLUMN_DATE, loc);

		// getContentResolver().insert(DBConstant.Patient_Name_Columns.CONTENT_URI,
		// name);
		loc = "";
		// if(lstWard != null && lstWard.size() > 0)
		{
			loc = initCap.toTitleCase(addSxWard.getText().toString());// EDITED
																		// 10002//loc
																		// =
																		// lstWard.get(addSxWard.getSelectedItemPosition()-1);
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_WARD, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_WARD, loc);
		addWard();

		contentValues.put(DBConstant.Patient_Columns.COLUMN_EMERGENCY,
				addSxEmergency.isChecked());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_EMERGENCY,
				addSxEmergency.isChecked());

		loc = "";
		// if(lstReferredBy != null && lstReferredBy.size() > 0)
		{
			loc = initCap.toTitleCase(addIpdReferredBy.getText().toString());// Edited
																				// 10002//loc
																				// =
																				// lstReferredBy.get(addIpdReferredBy.getSelectedItemPosition());
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_REF, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_REF, loc);
		addRef();

		loc = "";
		// if(lstPatientType != null && lstPatientType.size() > 0)
		{
			loc = initCap.toTitleCase(addSxType.getText().toString());// EDITED
																		// 10002//loc
																		// =
																		// lstPatientType.get(addSxType.getSelectedItemPosition());
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_TYPE, loc);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_TYPE, loc);

		contentValues.put(DBConstant.Patient_Columns.COLUMN_SERVICE_TYPE, 1);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_SERVICE_TYPE, 1);//ADDED 10010
		addType();

		contentValues.put(DBConstant.Patient_Columns.COLUMN_NOTE, note
				.getText().toString());
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_NOTE, note
				.getText().toString());

		String sex = null;
		if (btnMale.isChecked()) {
			sex = "Male";
		} else if (btnFemale.isChecked()) {
			sex = "Female";
		}
		contentValues.put(DBConstant.Patient_Columns.COLUMN_SEX, sex);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_SEX, sex);

		contentValues.put(DBConstant.Patient_Columns.COLUMN_SX_WATCH, "");
		contentValues.put(DBConstant.Patient_Columns.COLUMN_SYNC_STATUS, 0);
		contentValuesTemp.put(DBConstant.Patient_Temp_Columns.COLUMN_SYNC_STATUS, 0);

		getContentResolver().insert(DBConstant.Patient_Columns.CONTENT_URI,contentValues);

		getContentResolver().insert(DBConstant.Patient_Name_Columns.CONTENT_URI, name);
		Uri uri = getContentResolver().insert(DBConstant.Patient_Temp_Columns.CONTENT_URI, contentValuesTemp);

		//String myId = uri.toString().substring(uri.toString().lastIndexOf("/") + 1);
		//name.put(DBConstant.Patient_Name_Columns.COLUMN_RED_ID, myId);
		
		//SA 10009
				if(paths.size() > 0)
				{
					patientCursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, null, null, null, null);
					if (patientCursor != null && patientCursor.getCount() > 0) 
					{
						patientCursor.moveToLast();
						_id = patientCursor.getString(patientCursor.getColumnIndex(DBConstant.Patient_Columns.COLUMN_ID));
						String name_  = patientCursor.getString(patientCursor.getColumnIndex(DBConstant.Patient_Columns.COLUMN_NAME));

						
						for (int i = 0; i < paths.size(); i++) {
							String url = paths.get(i);
							ContentValues temp = new ContentValues();
							temp.put(DBConstant.Patient_Details_Columns.COLUMN_PATIENT_ID, _id);
							temp.put(DBConstant.Patient_Details_Columns.COLUMN_URL, url);
							temp.put(DBConstant.Patient_Details_Columns.COLUMN_PATIENT_TYPE, 1);
							temp.put(DBConstant.Patient_Details_Columns.COLUMN_SYNC_STATUS, 0);
							getContentResolver().insert(
									DBConstant.Patient_Details_Columns.CONTENT_URI, temp);
							Log.i("Paitent Details", "Patient ID:-"+_id + " --> "+"Name:"+name_+"-->"+url);
						}
					}
				}
				//EA 10009
				removeDialog(LOADING);
		
				//SA 10014
				//Toast.makeText(this, "IPD saved.", Toast.LENGTH_LONG).show();
				CustomToast.showToastMessage(this, "IPD Saved");
				//EA 10014
		clearField();
	}
	//SA 10005
	public void onToolTipOn()
	{
	/*		final Drawable error_indicator;
			error_indicator = getResources().getDrawable(R.drawable.error_icon_mdpi);
	        int left = 0;
	        int top = 0;
	        int right = error_indicator.getIntrinsicHeight();
	        int bottom = error_indicator.getIntrinsicWidth();
	        error_indicator.setBounds(new Rect(left, top, right, bottom));
	        addSxName.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View arg0, MotionEvent arg1) {
				// TODO Auto-generated method stub
				addSxName.setError("Enter patient name in here", error_indicator);
				return false;
			}
		});*/
		final Context c = getApplicationContext();

		//SU 10015
		addSxName.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tpatientname));	
			}
		});
		
		addSxLocation.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tlocation));
			}
		});
		addSxId.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					  CustomToast.showToastMessage(c, getString(R.string.tpatientid));
			}
		});
		
		addSxAge.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tage));
			}
		});
		
		addSxDiagnose.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tdiagnose));
			}
		});
		
		addIpdReferredBy.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tipdreferred));
			}
		});
		
		addSxType.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tpatienttype));
			}
		});
		
		addSxWard.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tward));
			}
		});
		
		addIpdTotalCount.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.ttotal));
			}
		});
		note.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			
			@Override
		public void onFocusChange(View v, boolean hasFocus) {
				// TODO Auto-generated method stub
				if(hasFocus)
					CustomToast.showToastMessage(c, getString(R.string.tnote));
			}
		});
		//EU 10015
	}
	
	@Override
	public void onPause() {
	    super.onPause();  // Always call the superclass method first
	}
	
	//EA 10005
	public void clearField() {
		addSxId.setText("");
		addSxName.setText("");
		// if(lstLocation != null && lstLocation.size() > 0)
		{
			addSxLocation.setText("");// addSxLocation.setSelection(0);
		}

		addSxAge.setText("");

		addSxDiagnose.setText("");

		// addSxDate.setText("Date : DD-MM-YYYY");
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String date = sdf.format(new Date(System.currentTimeMillis()));
		if (date.contains("/")) {
			date = date.replace("/", "-");
		}
		addSxDate.setText(date);

		// if(lstWard != null && lstWard.size() > 0)
		{
			addSxWard.setText("");// addSxWard.setSelection(0);
		}

		addSxEmergency.setChecked(false);

		// if(lstPatientType != null && lstPatientType.size() > 0)
		{
			addSxType.setText("");// setSelection(0);
		}

		String loc = "";
		// if(lstLocation != null && lstLocation.size() > 0)
		{
			addSxLocation.setText("");// loc =
										// lstLocation.get(addSxLocation.getSelectedItemPosition());
		}

		addIpdTotalCount.setText("");

		loc = "";
		// if(lstReferredBy != null && lstReferredBy.size() > 0)
		{
			addIpdReferredBy.setText("");// addIpdReferredBy.setSelection(0);
		}

		note.setText("");

	}

	public void onSave(View v) {
		if ((addSxName.getText() != null && addSxName.getText().toString()
				.length() > 0)
				&& (addSxLocation.getText() != null && addSxLocation.getText()
						.toString().length() > 0)) {
			save();
			//Toast.makeText(getApplicationContext(), addSxName.getText().toString()+"="+SearchAlgo.getNameSearchAlgo(addSxName.getText().toString()), Toast.LENGTH_LONG).show();
		} else {
			validateFields();//ADDED 10004
			/*Toast.makeText(
					this,
					"Please enter mandatory fields!",
					Toast.LENGTH_LONG).show();*/ //COMMENTED 10004
		}
		// Toast.makeText(this, "Data saved", Toast.LENGTH_LONG).show();
	}

	//SA 10004
    public void validateFields()
    {
    	if((addSxName.getText().toString() == null || addSxName.getText().toString()
				.length() == 0))
		{
			addSxName.requestFocus();
			addSxName.setError("Please enter patient name");
		}
		if((addSxLocation.getText().toString() == null || addSxLocation.getText()
				.toString().length() == 0))
		{
			addSxLocation.requestFocus();
			addSxLocation.setError("Please enter hospital name");
		}
    }
	//EA 10004
	
	public void onSaveMain(View v) {
		if ((addSxName.getText() != null && addSxName.getText().toString()
				.length() > 0)
				&& (addSxLocation.getText() != null && addSxLocation.getText()
						.toString().length() > 0)) {
			save();
			finish();
		} else {
			validateFields();//ADDED 10004
			/*Toast.makeText(
					this,
					"Please enter mandatory fields!",
					Toast.LENGTH_LONG).show();*/ //COMMENTED 10004
		}
		// save();
		// Toast.makeText(this, "Data saved", Toast.LENGTH_LONG).show();
		//finish(); COMMENTED 10004
	}

	public void onCancel(View v) {
		finish();
	}

	public void showHideNote(View v) {
		if (note.getVisibility() == View.GONE) {
			note.setVisibility(View.VISIBLE);
		} else {
			note.setVisibility(View.GONE);
		}
	}

	public void resetData() {
		/*
		 * lstLocation.clear(); lstPatientType.clear(); lstReferredBy.clear();
		 * lstWard.clear();
		 */
	}

	public static final int LOADING = 101;

	@Override
	protected Dialog onCreateDialog(int id, Bundle b) {
		// TODO Auto-generated method stub
		//String msg = b.getString("message");
		switch (id) {
		case LOADING:
			ProgressDialog loadingDialog = new ProgressDialog(this);
			loadingDialog.setMessage("Please wait...");
			loadingDialog.setCancelable(false);
			return loadingDialog;
//SA 10017
		 case PIC:
			 LayoutInflater inflater = LayoutInflater.from(this);
			 View dialogview = inflater.inflate(R.layout.add_pic_dialog, null);
			 AlertDialog.Builder dialogbuilder = new AlertDialog.Builder(this);
			 //dialogbuilder.setTitle("Add Picture");
			 dialogbuilder.setView(dialogview);
			 return dialogbuilder.create();
//EA 10017			 
		}
		return super.onCreateDialog(id);
	}

	/*
	 * public void setNameAdapter() { adapter = new SimpleCursorAdapter(this,
	 * android.R.layout.simple_dropdown_item_1line, null, from, to);
	 * addSxName.setAdapter(adapter);
	 * 
	 * // Set an OnItemClickListener, to update dependent fields when // a
	 * choice is made in the AutoCompleteTextView.
	 * addSxName.setOnItemClickListener(new OnItemClickListener() { public void
	 * onItemClick(AdapterView<?> listView, View view, int position, long id) {
	 * // Get the cursor, positioned to the corresponding row in the // result
	 * set Cursor cursor = (Cursor) listView.getItemAtPosition(position);
	 * 
	 * // Get the state's capital from this row in the database. } });
	 * 
	 * // Set the CursorToStringConverter, to provide the labels for the //
	 * choices to be displayed in the AutoCompleteTextView.
	 * adapter.setCursorToStringConverter(new CursorToStringConverter() { public
	 * String convertToString(android.database.Cursor cursor) { // Get the label
	 * for this row out of the "state" column //final int columnIndex =
	 * cursor.getColumnIndexOrThrow("state"); final String str =
	 * cursor.getString
	 * (cursor.getColumnIndex(DBConstant.Patient_Columns.COLUMN_NAME)); return
	 * str; } }); // Set the FilterQueryProvider, to run queries for choices //
	 * that match the specified input. adapter.setFilterQueryProvider(new
	 * FilterQueryProvider() { public Cursor runQuery(CharSequence constraint) {
	 * // Search for states whose names begin with the specified letters.
	 * //Cursor cursor =
	 * getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
	 * projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" +
	 * constraint.toString()+"%", new String[]{constraint.toString()}, null);
	 * Cursor cursor =
	 * getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
	 * projection, DBConstant.Patient_Columns.COLUMN_NAME + " like '%" +
	 * constraint.toString()+"%'", null, null); return cursor; } }); }
	 */
	public void setLocationAdapter() {
		// int[] to = new int[] { android.R.id.text1 };
		String[] from = new String[] { DBConstant.Location_Columns.COLUMN_NAME };

		locationAdapter =
		/*
		 * new SimpleCursorAdapter(this,
		 * android.R.layout.simple_dropdown_item_1line, null, from, to);
		 */
		new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
		addSxLocation.setAdapter(locationAdapter);

		// Set an OnItemClickListener, to update dependent fields when
		// a choice is made in the AutoCompleteTextView.
		addSxLocation.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> listView, View view,
					int position, long id) {
				// Get the cursor, positioned to the corresponding row in the
				// result set
				/*
				 * Cursor cursor = (Cursor)
				 * listView.getItemAtPosition(position);
				 * 
				 * // Get the state's capital from this row in the database.
				 * String name = cursor.getString(1); String _id =
				 * cursor.getString(0); String type = cursor.getString(2);
				 * startNextActivity(_id, name, type);
				 */
				// Update the parent class's TextView
			}
		});

		// Set the CursorToStringConverter, to provide the labels for the
		// choices to be displayed in the AutoCompleteTextView.
		locationAdapter
				.setCursorToStringConverter(new CursorToStringConverter() {
					@Override
					public String convertToString(android.database.Cursor cursor) {
						// Get the label for this row out of the "state" column
						// final int columnIndex =
						// cursor.getColumnIndexOrThrow("state");
						final String str = cursor.getString(cursor.getColumnIndex(DBConstant.Location_Columns.COLUMN_NAME));
						return str;
					}
				});
		// Set the FilterQueryProvider, to run queries for choices
		// that match the specified input.
		locationAdapter.setFilterQueryProvider(new FilterQueryProvider() {
			@Override
			public Cursor runQuery(CharSequence constraint) {
				// Search for states whose names begin with the specified
				// letters.
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" +
				// constraint.toString()+"%", new
				// String[]{constraint.toString()}, null);
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME +
				// " like '%" + constraint.toString()+"%'", null, null);

				Cursor cursor = getContentResolver().query(
						DBConstant.Location_Columns.CONTENT_URI,null,
						DBConstant.Location_Columns.COLUMN_NAME + " like '%"+ constraint.toString() + "%'", null, null);
				return cursor;
			}
		});
	}

	/*
	 * private class LocationTask extends AsyncTask<Void, Void, Cursor> {
	 * 
	 * @Override protected Cursor doInBackground(Void... params) { // TODO
	 * Auto-generated method stub try { return
	 * AddIPDActivity.this.getContentResolver
	 * ().query(DBConstant.Location_Columns.CONTENT_URI, null, null, null,
	 * null); } catch (SQLException sqle) { throw sqle; } }
	 * 
	 * @Override protected void onPostExecute(Cursor result) { // TODO
	 * Auto-generated method stub super.onPostExecute(result);
	 * 
	 * if(result != null && result.getCount() > 0) { //result.moveToFirst();
	 * while(result.moveToNext()) { lstLocation.add(result.getString(1)); }
	 * locationAdapter = new ArrayAdapter<String>(AddIPDActivity.this,
	 * android.R.layout.simple_AutoCompleteTextView_item, lstLocation);
	 * locationAdapter.setDropDownViewResource(android.R.layout.
	 * simple_AutoCompleteTextView_dropdown_item);
	 * addSxLocation.setAdapter(locationAdapter); } WardTask wardTask = new
	 * WardTask(); wardTask.execute(); }
	 * 
	 * @Override protected void onPreExecute() { // TODO Auto-generated method
	 * stub super.onPreExecute(); Bundle b = new Bundle();
	 * b.putString("message", "Getting DB contents"); showDialog(LOADING, b); }
	 * }
	 */

	public void setWardAdapter() {
		// int[] to = new int[] { android.R.id.text1 };
		String[] from = new String[] { DBConstant.Ward_Columns.COLUMN_NAME };
		wardAdapter =
		/*
		 * new SimpleCursorAdapter(this,
		 * android.R.layout.simple_dropdown_item_1line, null, from, to);
		 */new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
		addSxWard.setAdapter(wardAdapter);

		// Set an OnItemClickListener, to update dependent fields when
		// a choice is made in the AutoCompleteTextView.
		addSxWard.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> listView, View view,
					int position, long id) {
				// Get the cursor, positioned to the corresponding row in the
				// result set
				/*
				 * Cursor cursor = (Cursor)
				 * listView.getItemAtPosition(position);
				 * 
				 * // Get the state's capital from this row in the database.
				 * String name = cursor.getString(1); String _id =
				 * cursor.getString(0); String type = cursor.getString(2);
				 * startNextActivity(_id, name, type);
				 */
				// Update the parent class's TextView
			}
		});

		// Set the CursorToStringConverter, to provide the labels for the
		// choices to be displayed in the AutoCompleteTextView.
		wardAdapter.setCursorToStringConverter(new CursorToStringConverter() {
			@Override
			public String convertToString(android.database.Cursor cursor) {
				// Get the label for this row out of the "state" column
				// final int columnIndex =
				// cursor.getColumnIndexOrThrow("state");
				final String str = cursor.getString(cursor
						.getColumnIndex(DBConstant.Ward_Columns.COLUMN_NAME));
				return str;
			}
		});
		// Set the FilterQueryProvider, to run queries for choices
		// that match the specified input.
		wardAdapter.setFilterQueryProvider(new FilterQueryProvider() {
			@Override
			public Cursor runQuery(CharSequence constraint) {
				// Search for states whose names begin with the specified
				// letters.
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" +
				// constraint.toString()+"%", new
				// String[]{constraint.toString()}, null);
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME +
				// " like '%" + constraint.toString()+"%'", null, null);

				Cursor cursor = getContentResolver().query(
						DBConstant.Ward_Columns.CONTENT_URI,
						null,
						DBConstant.Ward_Columns.COLUMN_NAME + " like '%"
								+ constraint.toString() + "%'", null, null);

				return cursor;
			}
		});
	}

	/*
	 * private class WardTask extends AsyncTask<Void, Void, Cursor> {
	 * 
	 * @Override protected Cursor doInBackground(Void... params) { // TODO
	 * Auto-generated method stub try { return
	 * AddIPDActivity.this.getContentResolver
	 * ().query(DBConstant.Ward_Columns.CONTENT_URI, null, null, null, null); }
	 * catch (SQLException sqle) { throw sqle; } }
	 * 
	 * @Override protected void onPostExecute(Cursor result) { // TODO
	 * Auto-generated method stub super.onPostExecute(result);
	 * 
	 * if(result != null && result.getCount() > 0) { //result.moveToFirst();
	 * while(result.moveToNext()) { lstWard.add(result.getString(1)); }
	 * wardAdapter = new ArrayAdapter<String>(AddIPDActivity.this,
	 * android.R.layout.simple_AutoCompleteTextView_item, lstWard);
	 * wardAdapter.setDropDownViewResource
	 * (android.R.layout.simple_AutoCompleteTextView_dropdown_item);
	 * addSxWard.setAdapter(wardAdapter); } ReferredByTask teamMemberTask = new
	 * ReferredByTask(); teamMemberTask.execute(); }
	 * 
	 * @Override protected void onPreExecute() { // TODO Auto-generated method
	 * stub super.onPreExecute(); } }
	 */
	public void setReferredByAdapter() {
		// int[] to = new int[] { android.R.id.text1 };
		String[] from = new String[] { DBConstant.Ref_Columns.COLUMN_NAME };

		referredByAdapter =
		/*
		 * new SimpleCursorAdapter(this,
		 * android.R.layout.simple_dropdown_item_1line, null, from, to);
		 */
		new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
		addIpdReferredBy.setAdapter(referredByAdapter);

		// Set an OnItemClickListener, to update dependent fields when
		// a choice is made in the AutoCompleteTextView.
		addIpdReferredBy.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> listView, View view,
					int position, long id) {
				// Get the cursor, positioned to the corresponding row in the
				// result set
				/*
				 * Cursor cursor = (Cursor)
				 * listView.getItemAtPosition(position);
				 * 
				 * // Get the state's capital from this row in the database.
				 * String name = cursor.getString(1); String _id =
				 * cursor.getString(0); String type = cursor.getString(2);
				 * startNextActivity(_id, name, type);
				 */
				// Update the parent class's TextView
			}
		});

		// Set the CursorToStringConverter, to provide the labels for the
		// choices to be displayed in the AutoCompleteTextView.
		referredByAdapter
				.setCursorToStringConverter(new CursorToStringConverter() {
					@Override
					public String convertToString(android.database.Cursor cursor) {
						// Get the label for this row out of the "state" column
						// final int columnIndex =
						// cursor.getColumnIndexOrThrow("state");
						final String str = cursor.getString(cursor
								.getColumnIndex(DBConstant.Ref_Columns.COLUMN_NAME));
						return str;
					}
				});
		// Set the FilterQueryProvider, to run queries for choices
		// that match the specified input.
		referredByAdapter.setFilterQueryProvider(new FilterQueryProvider() {
			@Override
			public Cursor runQuery(CharSequence constraint) {
				// Search for states whose names begin with the specified
				// letters.
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" +
				// constraint.toString()+"%", new
				// String[]{constraint.toString()}, null);
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME +
				// " like '%" + constraint.toString()+"%'", null, null);

				Cursor cursor = getContentResolver().query(
						DBConstant.Ref_Columns.CONTENT_URI,
						null,
						DBConstant.Ref_Columns.COLUMN_NAME + " like '%"
								+ constraint.toString() + "%'", null, null);

				return cursor;
			}
		});
	}

	public void setTypeAdapter() {
		// int[] to = new int[] { android.R.id.text1 };
		String[] from = new String[] { DBConstant.Types_Columns.COLUMN_NAME };

		typeAdapter =
		/*
		 * new SimpleCursorAdapter(this,
		 * android.R.layout.simple_dropdown_item_1line, null, from, to);
		 */
		new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
		addSxType.setAdapter(typeAdapter);

		// Set an OnItemClickListener, to update dependent fields when
		// a choice is made in the AutoCompleteTextView.
		addSxType.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> listView, View view,
					int position, long id) {
				// Get the cursor, positioned to the corresponding row in the
				// result set
				/*
				 * Cursor cursor = (Cursor)
				 * listView.getItemAtPosition(position);
				 * 
				 * // Get the state's capital from this row in the database.
				 * String name = cursor.getString(1); String _id =
				 * cursor.getString(0); String type = cursor.getString(2);
				 * startNextActivity(_id, name, type);
				 */
				// Update the parent class's TextView
			}
		});

		// Set the CursorToStringConverter, to provide the labels for the
		// choices to be displayed in the AutoCompleteTextView.
		typeAdapter.setCursorToStringConverter(new CursorToStringConverter() {
			@Override
			public String convertToString(android.database.Cursor cursor) {
				// Get the label for this row out of the "state" column
				// final int columnIndex =
				// cursor.getColumnIndexOrThrow("state");
				final String str = cursor.getString(cursor
						.getColumnIndex(DBConstant.Ref_Columns.COLUMN_NAME));
				return str;
			}
		});
		// Set the FilterQueryProvider, to run queries for choices
		// that match the specified input.
		typeAdapter.setFilterQueryProvider(new FilterQueryProvider() {
			@Override
			public Cursor runQuery(CharSequence constraint) {
				// Search for states whose names begin with the specified
				// letters.
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" +
				// constraint.toString()+"%", new
				// String[]{constraint.toString()}, null);
				// Cursor cursor =
				// getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI,
				// projection, DBConstant.Patient_Columns.COLUMN_NAME +
				// " like '%" + constraint.toString()+"%'", null, null);

				Cursor cursor = getContentResolver().query(
						DBConstant.Types_Columns.CONTENT_URI,
						null,
						DBConstant.Types_Columns.COLUMN_NAME + " like '%"
								+ constraint.toString() + "%'", null, null);

				return cursor;
			}
		});
	}

	/*
	 * private class ReferredByTask extends AsyncTask<Void, Void, Cursor> {
	 * 
	 * @Override protected Cursor doInBackground(Void... params) { // TODO
	 * Auto-generated method stub try { return
	 * AddIPDActivity.this.getContentResolver
	 * ().query(DBConstant.Ref_Columns.CONTENT_URI, null, null, null, null); }
	 * catch (SQLException sqle) { throw sqle; } }
	 * 
	 * @Override protected void onPostExecute(Cursor result) { // TODO
	 * Auto-generated method stub super.onPostExecute(result);
	 * 
	 * if(result != null && result.getCount() > 0) { //result.moveToFirst();
	 * while(result.moveToNext()) { lstReferredBy.add(result.getString(1)); }
	 * referredByAdapter = new ArrayAdapter<String>(AddIPDActivity.this,
	 * android.R.layout.simple_AutoCompleteTextView_item, lstReferredBy);
	 * referredByAdapter.setDropDownViewResource(android.R.layout.
	 * simple_AutoCompleteTextView_dropdown_item);
	 * addIpdReferredBy.setAdapter(referredByAdapter); } TypeTask referredByTask
	 * = new TypeTask(); referredByTask.execute(); }
	 * 
	 * @Override protected void onPreExecute() { // TODO Auto-generated method
	 * stub super.onPreExecute(); } } private class TypeTask extends
	 * AsyncTask<Void, Void, Cursor> {
	 * 
	 * @Override protected Cursor doInBackground(Void... params) { // TODO
	 * Auto-generated method stub try { return
	 * AddIPDActivity.this.getContentResolver
	 * ().query(DBConstant.Types_Columns.CONTENT_URI, null, null, null, null); }
	 * catch (SQLException sqle) { throw sqle; } }
	 * 
	 * @Override protected void onPostExecute(Cursor result) { // TODO
	 * Auto-generated method stub super.onPostExecute(result);
	 * 
	 * if(result != null && result.getCount() > 0) { //result.moveToFirst();
	 * while(result.moveToNext()) { lstPatientType.add(result.getString(1)); }
	 * typeAdapter = new ArrayAdapter<String>(AddIPDActivity.this,
	 * android.R.layout.simple_AutoCompleteTextView_item, lstPatientType);
	 * typeAdapter.setDropDownViewResource(android.R.layout.
	 * simple_AutoCompleteTextView_dropdown_item);
	 * addSxType.setAdapter(typeAdapter); } removeDialog(LOADING);
	 * onDataLoaded(); }
	 * 
	 * @Override protected void onPreExecute() { // TODO Auto-generated method
	 * stub super.onPreExecute(); } }
	 */
	public void onDataLoaded(String data) {
		if (currentRequestCode != -1 && currentSelection != null) {
			switch (currentRequestCode) {
			case 100: // location
			{
				{
					addSxLocation.setText(data);// addSxLocation.setSelection(index);
					addSxLocation.requestFocus();
					Handler handler = new Handler() {
						@Override
						public void handleMessage(Message msg) {
							((AutoCompleteTextView) msg.obj)
									.setAdapter(locationAdapter);
						};
					};
					Message msg = handler.obtainMessage();
					msg.obj = addSxLocation;
					handler.sendMessageDelayed(msg, 200);
				}
			}
				break;
			case 107: // ref
			{
				{
					addIpdReferredBy.setText(data);// addIpdReferredBy.setSelection(index);
					addIpdReferredBy.requestFocus();
					Handler handler = new Handler() {
						@Override
						public void handleMessage(Message msg) {
							((AutoCompleteTextView) msg.obj)
									.setAdapter(referredByAdapter);
						};
					};
					Message msg = handler.obtainMessage();
					msg.obj = addIpdReferredBy;
					handler.sendMessageDelayed(msg, 200);
				}
			}
				break;
			case 104: // ward
			{
				{
					addSxWard.setText(data);// addSxWard.setSelection(index);
					addSxWard.requestFocus();
					Handler handler = new Handler() {
						@Override
						public void handleMessage(Message msg) {
							((AutoCompleteTextView) msg.obj)
									.setAdapter(wardAdapter);
						};
					};
					Message msg = handler.obtainMessage();
					msg.obj = addSxWard;
					handler.sendMessageDelayed(msg, 200);
				}
			}
				break;
			case 106: // type
			{
				{
					addSxType.setText(data);// addSxType.setSelection(index);
					addSxType.requestFocus();
					Handler handler = new Handler() {
						@Override
						public void handleMessage(Message msg) {
							((AutoCompleteTextView) msg.obj)
									.setAdapter(typeAdapter);
						};
					};
					Message msg = handler.obtainMessage();
					msg.obj = addSxType;
					handler.sendMessageDelayed(msg, 200);
				}
			}
				break;

			}
		}
		currentRequestCode = -1;
		currentSelection = null;
	}
}
