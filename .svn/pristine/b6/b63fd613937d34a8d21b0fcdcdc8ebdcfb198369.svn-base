/*
 * Category :- Expenses | Add Expenses
 * Developer:- Vikalp Patel
 * Aim      :- Expenses
 * Description :- Adding Expenses with Picture
 * S - START E- END  C- COMMENTED  U -EDITED A -ADDED
 * --------------------------------------------------------------------------------------------------------------------
 * INDEX       DEVELOPER		DATE			DESCRIPTION
 * --------------------------------------------------------------------------------------------------------------------
 * 10001       VIKALP PATEL    03/01/2014       ADDING CUSTOMIZE CAMERA
 * 10002       VIKALP PATEL    09/01/2014       INITCAP VALUES.
 */
 

package com.netdoers.com.ui;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.Dialog;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AutoCompleteTextView;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FilterQueryProvider;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.SimpleCursorAdapter;
import android.widget.SimpleCursorAdapter.CursorToStringConverter;
import android.widget.TextView;
import android.widget.Toast;

import com.netdoers.com.SmartConsultant;
import com.netdoers.com.dto.DBConstant;
import com.netdoers.com.utils.AppConstants;
import com.netdoers.com.utils.InitCap;
import com.smarthumanoid.com.R;

@SuppressLint("ValidFragment")
public class NewExpensesActivity extends FragmentActivity{

	EditText expensesDate;
	EditText expensesAmount;
	AutoCompleteTextView  paymentMode;
	EditText description;
	AutoCompleteTextView category;
	Uri currentFileUri;
	final int REQUEST_CAMERA = 1001;
	final int REQUEST_SMARTHUMANOID_CAMERA = 1002; //Added10001
	
	ContentValues contentValues;
	
	ArrayList<String> paths;
	SimpleCursorAdapter mAdapter;
	SimpleCursorAdapter catAdapter;
	Gallery gallery;
	InitCap initCap;//ADDED 10002
	
	ImagesAdapter imagesAdapter = null;
	
	ArrayList<Bitmap> data;
	
	Cursor expenseCursor;
	Cursor pathsCursor;
	TextView txtTitle;
	
	int currentRecord = 0;
	
	String _id = null;
	
	ImageView next;
	ImageView prev;
	ArrayList<String> strModeOfPayment = new ArrayList<String>();
	ArrayList<String> strBank = new ArrayList<String>();
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.newexpenses);
		
		_id = null;
		initializeData();
		initCap = new InitCap();//ADDED 10001
		txtTitle = (TextView) findViewById(R.id.add_sx_location_text);
		
		next = (ImageView) findViewById(R.id.btn_header_next);
		prev = (ImageView) findViewById(R.id.btn_header_prev);
		
		expensesDate = (EditText) findViewById(R.id.expenses_date);
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String date = sdf.format(new Date(System.currentTimeMillis()));
		if(date.contains("/"))
		{
			date = date.replace("/", "-");
		}
		expensesDate.setText(date);
		
		expensesAmount = (EditText) findViewById(R.id.expenses_amount);
		paymentMode = (AutoCompleteTextView) findViewById(R.id.expenses_mode_of_payment);
		setModeAdapter();
		
		description = (EditText) findViewById(R.id.expenses_description);		
				
		category = (AutoCompleteTextView) findViewById(R.id.expense_category);
		
		gallery = (Gallery) findViewById(R.id.imagePreview);
		gallery.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				Intent i = new Intent(NewExpensesActivity.this, DetailedImage.class);
				i.putExtra("url", paths.get(arg2));
				startActivity(i);
			}
		});
		setCategoryAdapter();
		contentValues = new ContentValues();
		
		data = new ArrayList<Bitmap>();
		imagesAdapter = new ImagesAdapter(this, data);
		gallery.setAdapter(imagesAdapter);
		paths =  new ArrayList<String>();
		
		loadExpenseCursor();
		//loadPathsCursor(0);
		
	}
	
	public void initializeData()
	{
		strModeOfPayment = SmartConsultant.getApplication().loadModeOfPayment();
		strBank = SmartConsultant.getApplication().loadBank();
	}
	public void setModeAdapter()
	{
		//int[] to = new int[] { android.R.id.text1 };
		int[] to = new int[] { R.id.txtText};
	    String[] from = new String[] { DBConstant.ModeOfPayment_Columns.COLUMN_NAME };
	    
		mAdapter = 
            /*new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    from, to);*/new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
		paymentMode.setAdapter(mAdapter);

        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
		paymentMode.setOnItemClickListener(new OnItemClickListener() {
            @Override
			public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
            }
        });

        // Set the CursorToStringConverter, to provide the labels for the
        // choices to be displayed in the AutoCompleteTextView.
        mAdapter.setCursorToStringConverter(new CursorToStringConverter() {
            @Override
			public String convertToString(android.database.Cursor cursor) {
                // Get the label for this row out of the "state" column
                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
                final String str = cursor.getString(cursor.getColumnIndex(DBConstant.ModeOfPayment_Columns.COLUMN_NAME));
                return str;
            }
        });
      // Set the FilterQueryProvider, to run queries for choices
        // that match the specified input.
        mAdapter.setFilterQueryProvider(new FilterQueryProvider() {
            @Override
			public Cursor runQuery(CharSequence constraint) {
                // Search for states whose names begin with the specified letters.
                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
            	Cursor cursor = getContentResolver().query(DBConstant.ModeOfPayment_Columns.CONTENT_URI, null, DBConstant.ModeOfPayment_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
                return cursor;
            }
        });
	}
	
	public void setCategoryAdapter()
	{
		//int[] to = new int[] { android.R.id.text1 };
		int[] to = new int[] { R.id.txtText};
	    String[] from = new String[] { DBConstant.Bank_Columns.COLUMN_NAME };
	    
		catAdapter = 
            /*new SimpleCursorAdapter(this, 
                    android.R.layout.simple_dropdown_item_1line, null,
                    from, to);*/new MyCursorAdapter(this, R.layout.edt_item, null, from, to);
		category.setAdapter(catAdapter);

        // Set an OnItemClickListener, to update dependent fields when
        // a choice is made in the AutoCompleteTextView.
		category.setOnItemClickListener(new OnItemClickListener() {
            @Override
			public void onItemClick(AdapterView<?> listView, View view,
                        int position, long id) {
                // Get the cursor, positioned to the corresponding row in the
                // result set
                Cursor cursor = (Cursor) listView.getItemAtPosition(position);

                // Get the state's capital from this row in the database.
            }
        });

        // Set the CursorToStringConverter, to provide the labels for the
        // choices to be displayed in the AutoCompleteTextView.
        catAdapter.setCursorToStringConverter(new CursorToStringConverter() {
            @Override
			public String convertToString(android.database.Cursor cursor) {
                // Get the label for this row out of the "state" column
                //final int columnIndex = cursor.getColumnIndexOrThrow("state");
                final String str = cursor.getString(cursor.getColumnIndex(DBConstant.Bank_Columns.COLUMN_NAME));
                return str;
            }
        });
      // Set the FilterQueryProvider, to run queries for choices
        // that match the specified input.
        catAdapter.setFilterQueryProvider(new FilterQueryProvider() {
            @Override
			public Cursor runQuery(CharSequence constraint) {
                // Search for states whose names begin with the specified letters.
                //Cursor cursor = getContentResolver().query(DBConstant.Patient_Columns.CONTENT_URI, projection, DBConstant.Patient_Columns.COLUMN_NAME + "=%" + constraint.toString()+"%", new String[]{constraint.toString()}, null);
            	Cursor cursor = getContentResolver().query(DBConstant.Bank_Columns.CONTENT_URI, null, DBConstant.Bank_Columns.COLUMN_NAME + " like '%" + constraint.toString()+"%'", null, null);
                return cursor;
            }
        });
	}
	public void onManagePaymentMode(View v)
	{
		Intent i = new Intent(this, ManageLOVActivity.class);
		i.putExtra("index", 8);
		startActivityForResult(i, 100);
	}
	
	public void onManageExpenseCategory(View v)
	{
		Intent i = new Intent(this, ManageLOVActivity.class);
		i.putExtra("index", 9);
		startActivityForResult(i, 101);
	}
	
	
	public void onTime(View v)
	{
		DialogFragment newFragment = new FromDatePickerFragment();
	    newFragment.show(getSupportFragmentManager(), "From Date");
	}
	
	public void onPrev(View v)
	{
		Log.e(">>>>>>>>> onPrev >>>", currentRecord+"");
		if(currentRecord > 0)
		{
			currentRecord--;
			setText();
			populateTextFields(currentRecord);
			expenseCursor.moveToPosition(currentRecord);
			loadPathsCursor(currentRecord);
			BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
			btmapOptions.inSampleSize = 2;
			//data = new ArrayList<Bitmap>();
			createAdapter();
			if(paths != null)
			{
				for(int i = 0; i < paths.size(); i++)
				{
					Bitmap bm = BitmapFactory.decodeFile(paths.get(i), btmapOptions);
					NewExpensesActivity.this.data.add(bm);
				}
				imagesAdapter.notifyDataSetChanged();
			}
			enableDisableButton();
		}
	}
	public void onFirst(View v)
	{
		Log.e(">>>>>>>>> onFirst >>>", currentRecord+"");
		if(currentRecord > 0)
		{
			currentRecord = 0;
			setText();
			populateTextFields(currentRecord);
			expenseCursor.moveToPosition(currentRecord);
			loadPathsCursor(currentRecord);
			BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
			btmapOptions.inSampleSize = 2;
			//data = new ArrayList<Bitmap>();
			createAdapter();
			if(paths != null)
			{
				for(int i = 0; i < paths.size(); i++)
				{
					Bitmap bm = BitmapFactory.decodeFile(paths.get(i), btmapOptions);
					NewExpensesActivity.this.data.add(bm);
				}
				imagesAdapter.notifyDataSetChanged();
			}
			enableDisableButton();
		}
	}
	
	public void onNext(View v)
	{
		Log.e(">>>>>>>>> onNext >>>", currentRecord+"");
		currentRecord++;
		if(currentRecord < expenseCursor.getCount())
		{
			
			setText();
			populateTextFields(currentRecord);
			expenseCursor.moveToPosition(currentRecord);
			loadPathsCursor(currentRecord);
			BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
			btmapOptions.inSampleSize = 2;
			//data.removeAll(data);//data = new ArrayList<Bitmap>();
			createAdapter();
			if(paths != null)
			{
				for(int i = 0; i < paths.size(); i++)
				{
					Bitmap bm = BitmapFactory.decodeFile(paths.get(i), btmapOptions);
					NewExpensesActivity.this.data.add(bm);
				}
				imagesAdapter.notifyDataSetChanged();
			}
			
			enableDisableButton();
		}
		else
		{
			_id = null;
			currentRecord = Math.max(expenseCursor.getCount(), 0);
			clearField();
		}
	}
	
	public void onLast(View v)
	{
		Log.e(">>>>>>>>> onLast >>>", currentRecord+"");
		_id = null;
		currentRecord = expenseCursor.getCount();
		{
			currentRecord = Math.max(expenseCursor.getCount(), 0);
			clearField();
		}
	}
	
	public void enableDisableButton()
	{
		/*if(expenseCursor.getCount() == 0)
		{
			next.setEnabled(false);
			prev.setEnabled(false);
		}
		else 
		{
			if(currentRecord == 0)
			{
				prev.setEnabled(false);
				next.setEnabled(true);
			}
			if(currentRecord == expenseCursor.getCount())
			{
				prev.setEnabled(true);
				next.setEnabled(false);
			}
		}*/
	}
	public void populateTextFields(int index)
	{
		if(expenseCursor != null && expenseCursor.getCount() > index)
		{
			expenseCursor.moveToPosition(index);
			_id 		= expenseCursor.getString(expenseCursor.getColumnIndex(DBConstant.Expeses_Columns.COLUMN_ID));
			String date = expenseCursor.getString(expenseCursor.getColumnIndex(DBConstant.Expeses_Columns.COLUMN_DATE));
			String amount = expenseCursor.getString(expenseCursor.getColumnIndex(DBConstant.Expeses_Columns.COLUMN_AMOUNT));
			String desc = expenseCursor.getString(expenseCursor.getColumnIndex(DBConstant.Expeses_Columns.COLUMN_DESCRIPTION));
			String cat = expenseCursor.getString(expenseCursor.getColumnIndex(DBConstant.Expeses_Columns.COLUMN_CATEGORY));
			String mode = expenseCursor.getString(expenseCursor.getColumnIndex(DBConstant.Expeses_Columns.COLUMN_PAYMENT_MODE));
			
			
			expensesDate.setText(date);
			expensesAmount.setText(amount);
			description.setText(desc);
			category.setText(cat);
			paymentMode.setText(mode);
		}
	}
	
	
	
	class FromDatePickerFragment extends DialogFragment implements OnDateSetListener
	{

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current time as the default values for the picker
			final Calendar c = Calendar.getInstance();
			int yr = c.get(Calendar.YEAR);
			int mnth = c.get(Calendar.MONTH);
			int day = c.get(Calendar.DAY_OF_MONTH);
			// Create a new instance of TimePickerDialog and return it
			return new DatePickerDialog(getActivity(), this, yr, mnth, day);
		}
		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear,int dayOfMonth) {
			// TODO Auto-generated method stub
			String date;
			monthOfYear++;
			if(dayOfMonth < 10)
			{
				date = "0" + dayOfMonth+"-";
			}
			else 
			{
				date = dayOfMonth+"-";
			}
			if(monthOfYear < 10)
			{
				date += "0" + monthOfYear+"-";
			}
			else
			{
				date += monthOfYear+"-";
			}
			
			date += year;
			//addSxDate.setText(dayOfMonth+"-"+monthOfYear+"-"+year);
			expensesDate.setText(date);
		}
	}
	
	public void onTakePicture(View v)
	{
		/*
		 * 
		 */
		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        File imageDirectory =null;
		String state = Environment.getExternalStorageState();
		if (Environment.MEDIA_MOUNTED.equals(state)) 
		{
			imageDirectory = new File(AppConstants.IMAGE_DIRECTORY_PATH);
		}
		else
		{
			imageDirectory = new File(AppConstants.IMAGE_DIRECTORY_PATH_DATA);
		}

		imageDirectory.mkdirs();
		File tempFile = new File(imageDirectory, getVideoName()+ AppConstants.EXTENSION);
		Uri outputFileUri = Uri.fromFile( tempFile );
		currentFileUri = outputFileUri;
        intent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri);
//        startActivityForResult(intent, REQUEST_CAMERA);
        /*
         * 
         */
        Intent cameraIntent = new Intent(getApplicationContext(),CameraActivity.class);
        cameraIntent.putExtra("FILE_URI", outputFileUri.toString());
        startActivityForResult(cameraIntent, REQUEST_SMARTHUMANOID_CAMERA);
	}
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		Bitmap bm = null;
		if (resultCode == RESULT_OK) 
		{
			if (requestCode == REQUEST_CAMERA) {
				BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
				btmapOptions.inSampleSize = 2;
				bm = BitmapFactory.decodeFile(currentFileUri.getPath(), btmapOptions);
				/*ImageView image = (ImageView) findViewById(R.id.imagePreview);
				image.setImageBitmap(bm);*/
				
				NewExpensesActivity.this.data.add(bm);
				imagesAdapter.notifyDataSetChanged();
				galleryAddPic();
				paths.add(currentFileUri.getPath());
			}
			
			if (requestCode == REQUEST_SMARTHUMANOID_CAMERA) {
				
				if (resultCode == RESULT_OK) {
					BitmapFactory.Options btmapOptions = new BitmapFactory.Options();
					btmapOptions.inSampleSize = 2;
					bm = BitmapFactory.decodeFile(currentFileUri.getPath(),
							btmapOptions);
					NewExpensesActivity.this.data.add(bm);
					imagesAdapter.notifyDataSetChanged();
					galleryAddPic();
					paths.add(currentFileUri.getPath());
				} else {
					Toast.makeText(getApplicationContext(), "Error while taking picture!", Toast.LENGTH_SHORT).show();
				}
			}
		
			if (requestCode == 100) { //payment mode
				String str = data.getStringExtra("data");
				paymentMode.setText(str);
				Handler handler = new Handler() 
				{
					@Override
					public void handleMessage(Message msg) {
					    ((AutoCompleteTextView)msg.obj).setAdapter(mAdapter);
					};
				};
				Message msg = handler.obtainMessage();
				msg.obj = paymentMode;
				handler.sendMessageDelayed(msg, 200);
			}
			if (requestCode == 101) { //category
				String str = data.getStringExtra("data");
				category.setText(str);
				Handler handler = new Handler() 
				{
					@Override
					public void handleMessage(Message msg) {
					    ((AutoCompleteTextView)msg.obj).setAdapter(catAdapter);
					};
				};
				Message msg = handler.obtainMessage();
				msg.obj = category;
				handler.sendMessageDelayed(msg, 200);
			}
		}
	}
	
	public void onSave(View v)
	{
		if((expensesAmount.getText() != null && expensesAmount.getText().toString().length() > 0) 
				&& (description.getText() != null && description.getText().toString().length() > 0))
			
		{
			contentValues = new ContentValues();
			contentValues.put(DBConstant.Expeses_Columns.COLUMN_DATE, expensesDate.getText().toString());
			contentValues.put(DBConstant.Expeses_Columns.COLUMN_AMOUNT, expensesAmount.getText().toString());
			contentValues.put(DBConstant.Expeses_Columns.COLUMN_DESCRIPTION, initCap.toTitleCase(description.getText().toString()));
			contentValues.put(DBConstant.Expeses_Columns.COLUMN_PAYMENT_MODE, initCap.toTitleCase(paymentMode.getText().toString()));
			contentValues.put(DBConstant.Expeses_Columns.COLUMN_CATEGORY, initCap.toTitleCase(category.getText().toString()));
			contentValues.put(DBConstant.Expeses_Columns.COLUMN_SYNC_STATUS, 0);
			
			String myId = null;
			Uri uri = null;
			
			if(_id != null)
			{
				getContentResolver().update(DBConstant.Expeses_Columns.CONTENT_URI, contentValues, "_id=?",  new String[]{_id});
				
				int del = getContentResolver().delete(DBConstant.Expeses_Details_Columns.CONTENT_URI, DBConstant.Expeses_Details_Columns.COLUMN_EXP_ID+"=?", new String[]{_id});
				Log.e("DELETE", del+"");
				myId = _id;
			}
			else
			{
				uri = getContentResolver().insert(DBConstant.Expeses_Columns.CONTENT_URI, contentValues);
				myId = uri.toString().substring(uri.toString().lastIndexOf("/") + 1);
			}
			
			
			for(int i = 0 ; i < paths.size(); i++)
			{
				String url = paths.get(i);
				String name = url.substring(url.lastIndexOf("/") + 1);
				ContentValues temp = new ContentValues();
				temp.put(DBConstant.Expeses_Details_Columns.COLUMN_EXP_ID, myId);
				temp.put(DBConstant.Expeses_Details_Columns.COLUMN_NAME, name);
				temp.put(DBConstant.Expeses_Details_Columns.COLUMN_URL, url);
				getContentResolver().insert(DBConstant.Expeses_Details_Columns.CONTENT_URI, temp);
			}
			addModeOfPayment();
			addBank();
			clearField();
			loadExpenseCursor();
		}
		else
		{
			Toast.makeText(this, "Make sure you have enter proper values in Amount and Description fields.", Toast.LENGTH_LONG).show();
		}
	}
	
	public void addModeOfPayment()
	{
		String s = initCap.toTitleCase(paymentMode.getText().toString());//EDITED 10002
		if(s!= null && s.length() > 0 && !strModeOfPayment.contains(new String(s)))
		{
			addContent(DBConstant.ModeOfPayment_Columns.CONTENT_URI, s);
		}
	}
	
	public void addBank()
	{
		String s = initCap.toTitleCase(category.getText().toString());//EDITED 10002
		if(s!= null && s.length() > 0 && !strBank.contains(new String(s)))
		{
			addContent(DBConstant.Bank_Columns.CONTENT_URI, s);
		}
	}
	
	public void addContent(Uri uri, String str)
	{
		ContentValues values = new ContentValues();
		str = initCap.toTitleCase(str);//ADDED 10002
		values.put(DBConstant.Location_Columns.COLUMN_NAME, str);
		values.put(DBConstant.Location_Columns.COLUMN_SYNC_STATUS, 0);
		getContentResolver().insert(uri, values);
	}
	public void clearField()
	{
		paths.clear();
		paths = new ArrayList<String>();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String date = sdf.format(new Date(System.currentTimeMillis()));
		if(date.contains("/"))
		{
			date = date.replace("/", "-");
		}
		expensesDate.setText(date);
		
		description.setText("");
		paymentMode.setText("");
		category.setText("");
		expensesAmount.setText("");
		
		/*expensesAmount.setHint("Amount");
		description.setHint("Description");
		paymentMode.setHint("Mode e.g Bank transfer, Cash");
		category.setHint("Expense category");*/
		
		expenseCursor = null;
		pathsCursor = null;
		loadExpenseCursor();
		//loadPathsCursor(0);
		
		data.removeAll(data);//data = new ArrayList<Bitmap>();
		currentRecord = Math.max(expenseCursor.getCount(), 0);
		gallery.setAdapter(null);
		
		createAdapter();
	}
	
	public void createAdapter()
	{
		data = new ArrayList<Bitmap>();
		imagesAdapter = new ImagesAdapter(this, data);
		gallery.setAdapter(imagesAdapter);
	}
	public void loadExpenseCursor()
	{
		expenseCursor = getContentResolver().query(DBConstant.Expeses_Columns.CONTENT_URI, null, null, null, null);	
		currentRecord = Math.max(expenseCursor.getCount(), 0);
		setText();
	}
	public void setText()
	{
		txtTitle.setText("Entry " + (currentRecord+1) +" of " + (expenseCursor.getCount()+1));
	}
	
	public void loadPathsCursor(int index)
	{
		paths = new ArrayList<String>();
		if(expenseCursor != null && expenseCursor.getCount() > index)
		{
			expenseCursor.moveToPosition(index);
			String id = expenseCursor.getString(expenseCursor.getColumnIndex(DBConstant.Expeses_Columns.COLUMN_ID));
			pathsCursor = getContentResolver().query(DBConstant.Expeses_Details_Columns.CONTENT_URI, null, DBConstant.Expeses_Details_Columns.COLUMN_EXP_ID + "=?", new String[]{id}, null);
			
			if(pathsCursor != null && pathsCursor.getCount() > 0)
			{
				//paths = new ArrayList<String>();
				int colIndex = pathsCursor.getColumnIndex(DBConstant.Expeses_Details_Columns.COLUMN_URL);
				while(pathsCursor.moveToNext())
				{
					paths.add(pathsCursor.getString(colIndex));
				}
			}
		}
	}
	
	public static String getVideoName()
	{
		String name = "smartConsultant";
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		try {
			name = sdf.format(new Date(System.currentTimeMillis()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return name;
	}
	private void galleryAddPic() {
	    Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
	    File f = new File(currentFileUri.getPath());
	    Uri contentUri = Uri.fromFile(f);
	    mediaScanIntent.setData(contentUri);
	    this.sendBroadcast(mediaScanIntent);
	}
	
	public void saveData()
	{
		
	}
	@Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.menu, menu);
        return true;
    }
     
    /**
     * Event Handling for Individual menu item selected
     * Identify single menu item by it's id
     * */
    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
         
        switch (item.getItemId())
        {
        case R.id.mnuHelp:
        	Intent i = new Intent(this, HelpActivity.class);
        	i.putExtra("caller", "expense");
        	startActivity(i);
            return true;
        default:
            return super.onOptionsItemSelected(item);
        }
    }   
}
