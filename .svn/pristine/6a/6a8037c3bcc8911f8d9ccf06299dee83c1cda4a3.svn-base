/*
* Category :- Preferences
* Developer:- Vikalp Patel
* Aim :- Settings Preferences
* Description :- Taking Picture with the Activity
* S - START E- END C- COMMENTED U -EDITED A -ADDED
* --------------------------------------------------------------------------------------------------------------------
* INDEX		 DEVELOPER		 DATE		 DESCRIPTION
* --------------------------------------------------------------------------------------------------------------------
* 10001 	VIKALP PATEL  10/01/2014 	 Created Preferences
* 10002     VIKALP PATEL  10/01/2014     ADD FULLSCREEN THEME TO APPLICATION THROUGH PREFERENCES
*/

package com.netdoers.com.ui;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.preference.CheckBoxPreference;
import android.preference.EditTextPreference;
import android.preference.Preference;
import android.preference.PreferenceActivity;
import android.preference.PreferenceManager;
import android.widget.Toast;
import com.netdoers.com.SmartConsultant;
import com.smarthumanoid.com.R;

@SuppressLint("NewApi")
public class PrefsActivity extends PreferenceActivity implements OnSharedPreferenceChangeListener
{
	public static final int MESSAGE = 101;
	public static final int ABOUT = 102;
	
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		PreferenceManager prefMgr = getPreferenceManager();
		//prefMgr.setSharedPreferencesName("appSettingsPreferences");
		//SharedPreferences prefMgr =SmartConsultant.getSharedPreferences(); 
		//prefMgr.registerOnSharedPreferenceChangeListener(listener);
		addPreferencesFromResource(R.xml.settings);
		Preference dashBoard = prefMgr.findPreference("prefDashboard");
		if(dashBoard!=null)
		{
			dashBoard.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
				
				@Override
				public boolean onPreferenceClick(Preference preference) {
					// TODO Auto-generated method stub
					Intent i = new Intent(getApplicationContext(), DashboardManageActivity.class);
					startActivity(i);
					return false;
				}
			});
		}
		
		Preference manageList = prefMgr.findPreference("prefManageLov");
		if(manageList!=null)
		{
			manageList.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
				
				@Override
				public boolean onPreferenceClick(Preference preference) {
					// TODO Auto-generated method stub
					Intent i = new Intent(getApplicationContext(), ManageLOVActivity.class);
					startActivity(i);
					return false;
				}
			});
		}
		
		Preference syncFrequency = prefMgr.findPreference("prefSync");
		if(syncFrequency!=null)
		{
			syncFrequency.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
				
				@Override
				public boolean onPreferenceClick(Preference preference) {
					// TODO Auto-generated method stub
					if(isNetworkAvailable())
					{
						if(SmartConsultant.getPreferences().getUserLoginDTO().getSign_id() == null && SmartConsultant.getPreferences().getUserLoginDTO().getUserName() == null)
						{
							showDialog(MESSAGE);
						}
						else
						{
							Intent i = new Intent(getApplicationContext(), UploadStatusActivity.class);
							startActivity(i);	
						}
					}
					else
					{
						Toast.makeText(getApplicationContext(), "Not Connected", Toast.LENGTH_LONG).show();
					}
					return false;
				}
			});
		}
		
		
		Preference about = prefMgr.findPreference("prefAbout");
		if(about!=null)
		{
			about.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
				
				@Override
				public boolean onPreferenceClick(Preference preference) {
					// TODO Auto-generated method stub
					showDialog(ABOUT);
					return false;
				}
			});
		}
	}
	
	private boolean isNetworkAvailable() {
	    ConnectivityManager connectivityManager 
	          = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
	    NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
	    return activeNetworkInfo != null && activeNetworkInfo.isConnectedOrConnecting();
	}
	
	/*
	 * 
	 */
	 @Override
	protected Dialog onCreateDialog(int id) {
	    	// TODO Auto-generated method stub
	    	switch (id)
	    	{
		    	case MESSAGE:
		    		AlertDialog.Builder builder1 = new Builder(this);
		    		builder1.setTitle(R.string.app_name);
		    		builder1.setMessage("If you dont already have a login, please visit www.smarthumanoid.com and register.");
		    		builder1.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
		
		    			@Override
		    			public void onClick(DialogInterface dialog, int which) {
		    				// TODO Auto-generated method stub
		    				removeDialog(MESSAGE);
		    				Intent i = new Intent(getApplicationContext(), LoginScreen.class);
		    				startActivityForResult(i, 100);
		    			}
		    		});
		    		return builder1.create();
		    	case ABOUT:
		    		AlertDialog.Builder builder2 = new Builder(this);
		    		builder2.setTitle(R.string.app_name);
		    		builder2.setMessage("Smart Humanoid enables medical professional to spend more quality time with the patients by effectively using the technology already present with them. Currently we have 2 products in the pipeline- Smart Consultant: an app that enables medical professionals to track expenses and receivables.- Smartopedic – Medical records management system oriented towards single doctor clinic to mid sized practices");
		    		builder2.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
		
		    			@Override
		    			public void onClick(DialogInterface dialog, int which) {
		    				// TODO Auto-generated method stub
		    				removeDialog(ABOUT);
		    			}
		    		});
		    		return builder2.create();
	    	}
	    	return super.onCreateDialog(id);
	    }	
	/*
	 * 
	 */
	 @Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
			// TODO Auto-generated method stub
			super.onActivityResult(requestCode, resultCode, data);
			if(requestCode == 100 && resultCode == RESULT_OK)
			{
				Intent i = new Intent(this, UploadStatusActivity.class);
				startActivity(i);	
			}
			else
			{
				Toast.makeText(getApplicationContext(), "Invalid login credentials", Toast.LENGTH_LONG).show();
			}
		}
	 
	 @Override
	protected void onResume(){
	        super.onResume();
	        // Set up a listener whenever a key changes
	        getPreferenceScreen().getSharedPreferences()
	            .registerOnSharedPreferenceChangeListener(this);
	    }
	 

	@Override
	protected void onPause() {
	        super.onPause();
	        // Unregister the listener whenever a key changes
	        getPreferenceScreen().getSharedPreferences()
            .unregisterOnSharedPreferenceChangeListener(this);
	    }
	
	@Override
	public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,
			String key) {
		updatePreference(key);
	}
	
	 private void updatePreference(String key){
		/*if (key.equals("prefIsFullScreen")) {
			Preference preference = findPreference(key);
			if (preference instanceof CheckBoxPreference) {
				CheckBoxPreference fullScreenPreference = (CheckBoxPreference) preference;
				if (fullScreenPreference.isChecked()) {
					//SmartConsultant.getApplication().setTheme(android.R.style.Theme_NoTitleBar_Fullscreen);
				} else {
					//setTheme();
				}
			}
		}
		if (key.equals("prefIsToolTip")) {
			Preference preference = findPreference(key);
			if (preference instanceof CheckBoxPreference) {
				CheckBoxPreference toolTipPreference = (CheckBoxPreference) preference;
				if (toolTipPreference.isChecked()) {
		
				} else {
				
				}
			}
		}
		if (key.equals("prefSmartHumanoidCamera")) {
			Preference preference = findPreference(key);
			if (preference instanceof CheckBoxPreference) {
				CheckBoxPreference cameraPreference = (CheckBoxPreference) preference;
				if (cameraPreference.isChecked()) {
		
				} else {
				
				}
			}
		}
		*/
		if (key.equals("prefSyncFrequency")) {
			Preference preference = findPreference(key);
			if (preference instanceof EditTextPreference) {
				EditTextPreference syncFreqPreference = (EditTextPreference) preference;
				if (syncFreqPreference.getEditText().length() > 0) {
					syncFreqPreference.setSummary("In "+syncFreqPreference.getEditText(). getText().toString() +" days");
				} else {
					syncFreqPreference.setSummary("Never Synced");
				}
			}
		}
    }
}
